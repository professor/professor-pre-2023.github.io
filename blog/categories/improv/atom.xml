<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Improv | Todd Sedano]]></title>
  <link href="http://professor.github.io/blog/categories/improv/atom.xml" rel="self"/>
  <link href="http://professor.github.io/"/>
  <updated>2017-10-03T15:46:08-07:00</updated>
  <id>http://professor.github.io/</id>
  <author>
    <name><![CDATA[Todd Sedano]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Improv game for software engineers: Program Counter]]></title>
    <link href="http://professor.github.io/toddsedano/2012/07/27/improv-game-for-software-engineers-program-counter.html"/>
    <updated>2012-07-27T14:06:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2012/07/27/improv-game-for-software-engineers-program-counter</id>
    <content type="html"><![CDATA[<p>I invited this improv game themed around software development for some Brazilian computer science students visiting my campus. It&rsquo;s a variant of the many reaction based, warm-up games (e.g. &ldquo;Whoosh Ball&rdquo;) that encourage quick response time and discourages over-thinking or planning a response. I like playing it with software developers because it makes more sense to them than these other games.</p>

<h3>Instructions</h3>

<p>Have the group form a circle.</p>

<p>Explain that we are going to mimic a program counter moving around the circle. Each person gets to say the instruction that the program counter is going to do. The instructions are <strong>&ldquo;Op&rdquo;</strong>, <strong>&ldquo;Loop N&rdquo;</strong>, <strong>&ldquo;Method Call&rdquo;</strong>, <strong>&ldquo;If true&rdquo;</strong>, <strong>&ldquo;If false&rdquo;</strong></p>

<p><strong>&ldquo;Op&rdquo;</strong> &mdash; There are a variety of operations that a normal CPU would do, such as add, subtract, store to a register. For this game, we&rsquo;ll simplify all of these possible operations into a single command &ldquo;op&rdquo; &mdash; have the entire circle practice that command going around. Pretty simple. Let&rsquo;s make it more interesting.</p>

<p><strong>&ldquo;Loop N&rdquo;</strong> &mdash; A basic control flow of most programming languages is the ability to go through a loop and do multiple instructions each time. If someone says &ldquo;loop 3&rdquo; this indicates that we are iterating over a collection with three elements. The next person says &ldquo;one&rdquo; indicating that the first set of instructions is now happening. The next person says &ldquo;two&rdquo;. The next person says &ldquo;three&rdquo;. Then we proceed as normal. (I&rsquo;ve seen one group say &ldquo;Loop Zero&rdquo; which we treated as a finished loop. It&rsquo;s just like saying &ldquo;Op&rdquo;) We do this for awhile until people get it.</p>

<p><strong>&ldquo;Method Call&rdquo;</strong> and point to someone or say their name out loud &mdash; Often programs re-use code by calling a method on that section of the code. If someone says method call and points to someone we are jumping to that section of the code. (That person needs to decide which way the program counter will continue.)  We keep executing instructions until someone says <strong>&ldquo;return&rdquo;</strong> at which point the program counter goes back to the person who said &ldquo;method call&rdquo; (Sometimes people will think that it returns to the person who was pointed at, but it returns to the person who started the method call, just like a real program.) Yes, method calls can be nested multiple times and even have recursion.</p>

<p>I personally like this operation. In many improv games, the equivalent operation is often a chance for the person to pass control to someone else without cost. E.g. I panic, I don&rsquo;t want this thing, I think it&rsquo;s a &ldquo;hot potato&rdquo; so I&rsquo;m going to give it to you quickly by saying &ldquo;Zoom&rdquo; so that I don&rsquo;t have to deal with it. However, in this game, there is a cost of saying &ldquo;Method Call&rdquo; for the person, they have to remember that they said it. Everyone else in the room, just really needs to track the depth or number of method calls that have been said, where as the people who say method call need to remember where they are on the stack.</p>

<p><strong>&ldquo;If true&rdquo;</strong> and <strong>&ldquo;if false&rdquo;</strong> &mdash; eventually we get tired of going around in the same direction &mdash; Our program counter is pretty simple and can&rsquo;t deal with branch predictions so whenever we use the IF statement, we pay a performance penalty and skip the next step, e.g. the next person. &ldquo;If true&rdquo; then will skip the next person. &ldquo;If false&rdquo; then reverses the direction and skips the next person. (Here&rsquo;s an example, if we moving clockwise and you say &ldquo;if true&rdquo;, we skip the person to the left. If you say &ldquo;if false&rdquo;, it skips the person to the right and proceed clockwise.)</p>

<p><strong>&ldquo;Cheer&rdquo;</strong> &mdash; As soon as the first mistake happens, agree upon a verbal saying that symbolizes, &ldquo;We are having fun, we made a mistake, and we get to restart!&rdquo; In my improv training that&rsquo;s been &ldquo;Ah-ooo-ga&rdquo;, the Brazilian students preferred &ldquo;Ciao!&rdquo; and I&rsquo;ve seen other positive vocalizations.</p>

<h3>Other considerations</h3>

<p>After introducing these instructions, I allow the group to invite any programming constructs that they can think of, and I say &ldquo;yes&rdquo; to any suggestion no how bizarre it is. Sometimes I&rsquo;ll allow the group to tweak it if it isn&rsquo;t clear. If you try something let me know.</p>

<p>One variant of &ldquo;<strong>op</strong>&rdquo; is to allow them to create any normal single instruction operation. They could say &ldquo;add&rdquo;, &ldquo;store&rdquo;, &ldquo;multiply&rdquo; instead of &ldquo;op&rdquo; &mdash; I suspect that doing this might be best at the beginning, but I have not tried that experiment.</p>

<p>Feel free to use this game. I&rsquo;m assuming that no-one will ever remember that I invited it. =)</p>

<h3>Game History</h3>

<p>On February 20, 2012, a student group from <a href="http://www.uniasselvi.com.br">Uniasselvi University</a>
in Brazil visited Carnegie Mellon University in Silicon Valley. Since I don&rsquo;t know Portuguese, Professor Jan Charles Gross graciously translated my instructions.</p>

<p><span class="full-image-block ssNonEditable"><span><img src="http://professor.github.io/images/ToddSedano%20with%20JanCharlesGross.png" alt=""/></span></span></p>

<p>Professor Gross' son, Professor Sedano, Chris Zeise, Professor Gross</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improv meets Software Engineering, what might the intersection look like?]]></title>
    <link href="http://professor.github.io/toddsedano/2011/06/16/improv-meets-software-engineering.html"/>
    <updated>2011-06-16T21:32:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2011/06/16/improv-meets-software-engineering</id>
    <content type="html"><![CDATA[<p>When I first discovered improv, I enjoyed the creative play and sheer freedom it offered me. The basic tenets of improv gave me a safe place to unleash my creativity. The right side of my brain finally had an outlet. (I couldn&rsquo;t draw or play an instrument. I did enjoy singing, but I knew not to do that in a public setting!) I enjoyed every improv exercise that was introduced to me. Finally, I had an outlet to be creative and to play.</p>

<p>For the longest time, I didn&rsquo;t see how this could apply to software development. Deep down, I knew there must be a connection, but how could doing quick, fun exercises relate to software?</p>

<p>I did see how improv was affecting me and my style. My public speaking confidence was increasing. I was faster with responses to tough questions. My eye contact with others was on the rise. While I&rsquo;ve been an active listener, I noticed areas that I could grow. I saw how those skills translated directly to my work. Brainstorming was more effective when we bypass the critical analytical components of the brain. Teams could be more effective if they could more readily accept ideas from teammates. (If we don&rsquo;t agree with an idea, we tend not to accept it. However we can accept an offer from someone else without agreeing with it. Even with a ridiculous suggestion, good ideas can emerge.)</p>

<p>In preparing for the Applied Improvisors Network (AIN) conference of 2011, I reflected on software development and its intersection with improv. I came to a new realization, are not the agile methods aligned with the notions of improv? Let&rsquo;s look at ideas from improv and see how they map into modern software development.</p>

<p>The whole improve troop owns the show. If a performer steps out on stage, they are committing to the team that they have five seconds worth of an idea and trusts that the rest of the team will help them the rest. Agile methods encourage &ldquo;whole team&rdquo; where the entire team responsible for ownership of software development and management. This encourage collective owning of the source code repository where any member of the team can make changes as well as the notion that the team can manage itself. Improvisators set out to make their partner look good. Scene work happens when the entire troupe is helping and working together. This includes knowing when to go on stage in order to further a scene along and knowing when not to go on stage because everything is going to work out fine.Software developers want their team to look good.</p>

<p>Change: Improv thrives in chaotic situations. Improvisers are trained to deal with change. When improvisers are operating at the speed of thought on stage, anything can happen, and improvers try to make sense of it all. Agile methods are more ideal than traditional methods in environments where the requirements are changing. Even Extreme Programming&rsquo;s slogan is &ldquo;embrace change&rdquo;</p>

<p>Improvisers learn to be loose with their own ideas. In the dynamic environment of the stage, they need to be present in the moment, dealing with what is going on. If they are thinking too much about where they want the scene to head, they will miss out on where the scene is actually going. You can observe this when a performer says something that sounds like they weren&rsquo;t listening to what was just said. The performer was &ldquo;in their head&rdquo; trying to plan ahead and missed the last offer from their peer. We see this flexibility in the agile principals. With Test Driven Development, software developers hold the code loosely. Code written yesterday might be refactored and improved today. There isn&rsquo;t this notion of ideal or prefect software that never changes. As the situation changes, so does the code.</p>

<p>Improvisers work on actively listening. Extreme Programming&rsquo;s on site customer provides a direct customer voice into the software development process. As the engineer understands in real time the requirements from the customer, software is developed and refined in quick coding cycles.</p>

<p>Improvisers have techniques to celebrate failure. This is imperative because improvisers will fail. In warm up games, improvisers that aren&rsquo;t failing aren&rsquo;t playing them too safely. Agile methods have quick iterations and rapid software prototyping that allows for (in a software sense) for features to be explored and &ldquo;fail.&rdquo; If something isn&rsquo;t working right it is tweaked in the next iteration. Albeit the timeframe is different. Obviously improvisers fail numerous times during a warm up and might make unusual choices on stage, where as the timeframe on requirements churn might be the next iteration typically one week to four weeks. In a paired programming setting, ideas can be tried and experimented upon. Failure in this context may happen routinely during a coding session. Coder 1: Should this be a new class or should we modify an existing class? Coder 2: I don&rsquo;t know, let&rsquo;s try option 1. After a few minutes if option 1 isn&rsquo;t working out, they can quickly switch to option 2.</p>

<p>Interestingly, the improv game &ldquo;word at a time&rdquo; maps into paired programming. In &ldquo;word at a time&rdquo; a group tells a story with each person saying only one word. This exercise teaches shared ownership and the frustration of planning ahead. Variants of the game include &ldquo;one sentence at a time&rdquo; or &ldquo;1, 2, 3, 4, 3, 2, 1 words at a time.&rdquo; In paired programming, developers work on the same code at the same time. Typically the code is shown on one monitor but there are two keyboards and two mice so that at any point in time, either developer can start typing what they are thinking. There are many benefits to paired programming including high quality product with less defects, a product that is ready to be shipped sooner, team ownership of the entire code based (as opposed to code silos owned by a single programmer), shared understanding of the code base (every line of code was written by two people, if one leaves the company someone else knows what that code was doing). Often in pair programming, developers may take turns. I&rsquo;ll write a test case and my partner will make the code work. They will then write a test case, and I&rsquo;ll then get it to work. This practice is called ping-pong paired programming. This is much like &ldquo;A paragraph at a time&rdquo; The emphasis is on the dialogue between the two engineers and the code is the artifact of the conversation that happened.</p>

<p>Today, I see many similarities between improv and software development. I suspect that there are new concepts in software development that might be explored given insights in improv. That is a topic of more future research.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sitemap Powerpoint presentation]]></title>
    <link href="http://professor.github.io/toddsedano/2011/01/13/sitemap-powerpoint-presentation.html"/>
    <updated>2011-01-13T22:54:00-08:00</updated>
    <id>http://professor.github.io/toddsedano/2011/01/13/sitemap-powerpoint-presentation</id>
    <content type="html"><![CDATA[<p><a href="http://professor.github.io/images/TalkAgenda.jpg" border=0><img src="http://professor.github.io/images/TalkAgenda.jpg" width="75%" alt=""/></a></p>

<p>I tried an experimental presentation technique today, which I call &ldquo;Sitemap Presentation.&rdquo;</p>

<p>When I was asked to do the talk &ldquo;Entrepreneurial Opportunities in Silicon Valley&rdquo; for Carnegie Mellon University at the Pittsburgh campus, I drew out on paper my talk outline. My drawing reminded me of Kent Beck&rsquo;s notes when he was presenting at Rails Conf 2008 (?) &mdash; its much like his drawings at the beginning of his book.</p>

<p>When I was creating the slides, I wanted the ability to hop around to different parts of my presentation. Yes, I could do one ordering of the topics, but I wanted to be flexible with my talk and respond to what the audience wanted. So I scanned in my diagram and used the diagram as my agenda slide. I duplicated the diagram throughout the presentation. I found that the drawing was more to my liking. I&rsquo;ve never been fond of doing an agenda slide, they always feel so boring, but this really livened it up and allowed me to see quickly where we were headed.</p>

<p>In my ideal version, each part of the sitemap would be clickable. Thus I&rsquo;d have a title slide followed by an agenda slide. Whenever I clicked anywhere on my diagram, it would go off on that thread and then return to the agenda slide. If I clicked on a different part of the agenda, it would take on a different thread. I&rsquo;ll have to figure out how to do this in powerpoint / keynote.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Engineering Craft (or Software Engineering as a performance art)]]></title>
    <link href="http://professor.github.io/toddsedano/2010/05/29/software-engineering-craft-or-software-engineering-as-a-performance-art.html"/>
    <updated>2010-05-29T14:59:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2010/05/29/software-engineering-craft-or-software-engineering-as-a-performance-art</id>
    <content type="html"><![CDATA[<p>Experiment with full time students this summer to explore this topic.</p>

<p>In a language and framework of their choice, have students select a short project to build, ie a blog website, or twitter client mobile application. Include testing. In the first session, build the project. (Time it.) Repeat again. Repeat again. Repeat again. After each session reflect on what you learned. Was there insights about the IDE? Where there key command short cuts? Do your test cases get better from defects from previous sessions, or do they get worse because of short cuts? Is there an aspect of the technology that you are deficient in that requires additional practice? (Katana example) Look for trends across the student population.</p>

<p>Based upon trends across the student population, identify further areas of practice.</p>

<p>Try same experiment with paired programming.</p>

<p><a href="http://github.com/edgecase/ruby_koans">http://github.com/edgecase/ruby_koans</a></p>

<p>Inspiration: improv &ndash; learning scene work or singing a song from scratch. Take an impossible task and break into small concrete steps. Slowly build upon the steps to reach the goal. Sometimes explore the concept of each step with positive and negative examples.</p>

<p>Inspiration: Katana for TDD</p>

<p>Inspiration: Learning to play the piano. Strength building exercises. The whole point of the exercise is to build up . Much like dance where there are patterns, technique and skill aspects to a class. The patterns make learning dancing fun and motivate the student to keep going. Playing a song is rewarding. Working on skill is tedious but makes the fun stuff more accessible and easier to accomplish.</p>

<ul>
<li><a href="http://rubyquiz.com/">http://rubyquiz.com/</a></li>
<li>Ruby Koans &ndash; <a href="http://github.com/edgecase/ruby_koans">http://github.com/edgecase/ruby_koans</a></li>
<li>Javascript learning &ndash; <a href="http://ejohn.org/apps/learn">http://ejohn.org/apps/learn</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
