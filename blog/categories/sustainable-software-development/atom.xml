<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sustainable Software Development | Todd Sedano]]></title>
  <link href="http://professor.github.io/blog/categories/sustainable-software-development/atom.xml" rel="self"/>
  <link href="http://professor.github.io/"/>
  <updated>2018-12-01T09:42:26-08:00</updated>
  <id>http://professor.github.io/</id>
  <author>
    <name><![CDATA[Todd Sedano]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sustainable Software Development]]></title>
    <link href="http://professor.github.io/toddsedano/2017/07/14/sustainable-software-development-compared-to-extreme-programming.html"/>
    <updated>2017-07-14T08:05:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2017/07/14/sustainable-software-development-compared-to-extreme-programming</id>
    <content type="html"><![CDATA[<p>There are several ways in which Sustainable Software Development has evolved from Extreme Programming (XP)</p>

<ul>
  <li>Sustainable Software Develpoment combines user cenetered design with agile software development. Product designers apply design thinking and user research to understand what product and features to build. Extreme Programming relies on an onsite customer to tell the developers what to build. This is problematic in two ways. Often an onsite customer is unaviable, impractical, or too expensive to have on a team. Onsite customers are not trained in design thinking and information architecture.</li>
  <li>Sustainable Software Development reduces the commitment level of the team to the work in progress, the stories that each developer is currently working on. Unlike Extrmee Programming, the team does not commit to an amount of work to be done during a weekly cycle or iteration. There are no iterations in Sustinable Software Development.</li>
  <li>Sustainable Software Development focuses the technical practices on two main goals
      <ol>caretaking the code</ol>
      <ol>removing knowledge silos</ol>
      Extereme Programming has many practices around improving code quality, but removing knowledge silos is not an explicit goal.
  </li>
  <li>Sustainable Software Development replaces predictions with focusing on "what can we ship today?" and "what is the minimal left that is needed to ship?" Planning Extreme Programming utilizes the team's velocity and backlog to create burn down charts for forecasting the team's progress.
  <li>Sustainable Software Development identifies software development waste through weekly retros and removes them from action items and chores.   
</ul>


<p>Both Sustainable Software Development and Extreme Programming deal with the tension of dates and features by asking &ldquo;how do we reduce scope?&rdquo; and &ldquo;what should be done first?&rdquo; In other words, developer happiness and sustainability is achieved by prioritizing the work.</p>

<p>This table compares Sustainable Software Development to Extreme Programming (XP).</p>

<table class=comparison>
  <tr>
    <th>Sustainable Software Development</th>
    <th>Extreme Programming 2.0 (XP 1.0 names)</th>
  </tr>
  <tr>
    <td><same>
      Balanced Team</td>
    <td>Whole Team (Balanced Team)</td>
  </tr>  
  <tr>
    <td>Track One Practices</td>
    <td></td>
  </tr>
  <tr>
    <td class="ident">User research</td>
    <td>Real Customer Involvement<sup>C</sup> (On-site customer)<br/>
        It is impractical to have an onsite customer.
    </td>
  </tr>
  <tr>
    <td class="ident">User validation</td>
    <td></td>
  </tr>
  <tr>
    <td class="ident">Road Mapping</td>
    <td>Quarterly Cycle (Planning Game, Small Releases)</td>
  </tr>
  <tr>
    <td class="ident">Story writing</td>
    <td>Stories</td>
  </tr>
  <tr>
    <td class="ident">Story refining</td>
    <td></td>
  </tr>
  <tr>
    <td class="ident">Project startup</td>
    <td></td>
  </tr>
  <tr>
    <td>Track Two Practices</td>
    <td></td>
  </tr>
  <tr>
    <td class="ident">Caretaking the Code</td>
    <td></td>
  </tr>
  <tr>
    <td class="ident2">Clean code</td>
    <td>Code and Tests<sup>C</sup></td>
  </tr>
  <tr>
    <td class="ident2">Fast test suite and builds</td>
    <td>Ten-minute Build</td>
  </tr>
  <tr>
    <td class="ident2">Test Driven Development / BDD</td>
    <td>Test-First Programming </td>
  </tr>
  <tr>
    <td class="ident2">Team code ownership</td>
    <td>Shared Code<sup>C</sup> (Collective ownership)</td>
  </tr>
  <tr>
    <td class="ident2"> Continuous refactoring</td>
    <td>Incremental Design (Simple Design
Refactoring)</td>
  </tr>    
  <tr>
    <td class="ident2">Integrate frequently</td>
    <td>Continuous Integration and <br/>
        Single Code Base<sup>C</sup><br/>
        branches live a few hours at most</td>
  </tr>  
  <tr>
    <td class="ident2">Frequent releases<br/>
       subsumed by short feedback cycles<br/>
      Each team releases when features are done or at a given cadence</td>
    <td>Daily Deployment<sup>C</sup></td>
  </tr>
  <tr>
    <td class="ident2">Acceptance / staging environment</td>
    <td></td>
  </tr>
  <tr>
    <td class="ident2">Build system</td>
    <td></td>
  </tr>
  <tr>
    <td class="ident2">Stop on red builds</td>
    <td></td>
  </tr>
  <tr>
    <td class="ident">Remove Knowledge silos</td>
    <td></td>
  </tr>
  <tr>
    <td class="ident2">Continuous pair programming</td>
    <td>Pair Programming</td>
  </tr>
  <tr>
    <td class="ident2"> Overlapping pair rotations</td>
    <td></td>
  </tr>


  <tr>
    <td>Boundary Spanning Practices</td>
    <td></td>
  </tr>
  <tr>
    <td class="ident">Backlog grooming</td>
    <td></td>
  </tr>
  <tr>
    <td class="ident">Accepting stories</td>
    <td></td>
  </tr>
  <tr>
    <td class="ident">Story showcase meeting</td>
    <td>Weekly Cycle (Iteration Planning Meetings)</td>
  </tr>  


  <tr>
    <td>Project Management Practices</td>
    <td></td>
  </tr>
  <tr>
    <td class="ident">Core work hours</td>
    <td>Energized Work (<em>40-hr week)</em></td>
  </tr>
  <tr>
    <td class="ident">Stand-up</td>
    <td>N/A</td>
  </tr>  
  <tr>
    <td class="ident">Retro</td>
    <td>N/A</td>
  </tr>  
  <tr>
    <td class="ident">Flexible scope contracts </td>
    <td>Negotiated Scope Contract<sup>C</sup></td>
  </tr>
  <tr>
    <td class="ident">No overtime</td>
    <td>Energized Work (<em>40-hr week)</em></td>
  </tr>



  <tr>
    <td>
      Shared Schedule, Be Present</td>
    <td>Sit Together</td>
  </tr>
  <tr>
    <td>(mostly missing)
      Managing a Backlog</td>
    <td>Informative Workspace</td>
  </tr>
  <tr>
    <td>Not needed<br/>
        there is no commitment to each week</td>
    <td>Slack</td>
  </tr>
  <tr>
    <td>Not needed for all projects</td>
    <td>Incremental Deployment<sup>C</sup><br/>
        slowly replace a legacy systems</td>
  </tr>
  <tr>
    <td>Allocations<br/>
        Move engineers where needed</td>
    <td>Shrinking Teams<sup>C</sup><br/>
        Team Continuity<sup>C</sup></td>
  </tr>
  <tr>
    <tdOptional, depends on situation</td>
    <td>Root-cause analysis<sup>C</sup></td>
  </tr>
  <tr>
    <td></td>
    <td>Pay-per-use<sup>C</sup></td>
  </tr>
</table>




<br/>


<p><sup>C</sup> are optional XP 2.0 Corollary Practices</p>
]]></content>
  </entry>
  
</feed>
