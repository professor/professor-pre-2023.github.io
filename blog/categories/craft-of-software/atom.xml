<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Craft of Software | Todd Sedano]]></title>
  <link href="http://professor.github.io/blog/categories/craft-of-software/atom.xml" rel="self"/>
  <link href="http://professor.github.io/"/>
  <updated>2018-02-10T08:22:03-08:00</updated>
  <id>http://professor.github.io/</id>
  <author>
    <name><![CDATA[Todd Sedano]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Improving code readability -- turning comments into methods]]></title>
    <link href="http://professor.github.io/toddsedano/2013/02/19/improving-code-readability-turning-comments-into-methods.html"/>
    <updated>2013-02-19T21:49:00-08:00</updated>
    <id>http://professor.github.io/toddsedano/2013/02/19/improving-code-readability-turning-comments-into-methods</id>
    <content type="html"><![CDATA[<p>I&rsquo;m working with 21 developers to improve their code readability. Through a code read-through, they listen to another developer try and read their code. (See <a href="" title="http://sedano.org/journal/2011/3/30/code-readability-process.html">Code Readability Process</a> for more details.)</p>

<p>In reviewing one programmer&rsquo;s code, a sixty line method had a visual rhythm to it. There would be a blank space, a comment, then about ten lines of code, and the cycle would repeat. The comment would explained the code just following it.</p>

<p>The programmer realizes that the narrative is lost in their code, and feels compelled to add these comments to help the reader understand what is going on. These comments serve as section breaks or chapter headings.</p>

<p>Instead, the code could be split up into smaller methods, where each method name would clearly revel the intent of the code. The comment would be better served as a method invocation.</p>

<p>Here&rsquo;s the pattern</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//determine interest rate  (comment about the code intention)
</span><span class='line'>code
</span><span class='line'>code
</span><span class='line'>code</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Becomes</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>determine_interest_rate()
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here&rsquo;s the original code</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;bool Tictactoe::determine_game(int row, int column, char move){</span>
</span><span class='line'><span class="sr">    bool flag = true;</span>
</span><span class='line'><span class="sr">    int i;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">    /</span><span class="o">/</span> <span class="no">Check</span> <span class="n">the</span> <span class="n">row</span> <span class="n">of</span> <span class="n">latest</span> <span class="n">play</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">flag</span><span class="p">){</span>
</span><span class='line'>       <span class="n">flag</span> <span class="o">=</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>       <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>       <span class="k">while</span><span class="p">((</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">dimension</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="n">flag</span><span class="o">==</span><span class="kp">true</span><span class="p">)){</span>
</span><span class='line'>           <span class="k">if</span><span class="p">(</span><span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">move</span><span class="p">){</span>
</span><span class='line'>               <span class="n">flag</span> <span class="o">=</span> <span class="kp">false</span><span class="p">;</span>
</span><span class='line'>           <span class="p">}</span>
</span><span class='line'>           <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>       <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sr">//</span> <span class="no">Check</span> <span class="n">the</span> <span class="n">column</span> <span class="n">of</span> <span class="n">latest</span> <span class="n">play</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">flag</span><span class="p">){</span>
</span><span class='line'>        <span class="n">flag</span> <span class="o">=</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>        <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span><span class="p">((</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">dimension</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="p">(</span><span class="n">flag</span><span class="o">==</span><span class="kp">true</span><span class="p">)){</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">column</span><span class="o">]</span> <span class="o">!=</span> <span class="n">move</span><span class="p">){</span>
</span><span class='line'>                <span class="n">flag</span> <span class="o">=</span> <span class="kp">false</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">flag</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>Here&rsquo;s the revised code.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;    bool Tictactoe::determine_game(int row, int column, char move){</span>
</span><span class='line'><span class="sr">    bool winner_found;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">    winner_found = check_row_of_latest_play(row) ||</span>
</span><span class='line'><span class="sr">                   check_column_of_latest_play(column) ||</span>
</span><span class='line'><span class="sr">                   check_...</span>
</span><span class='line'>
</span><span class='line'><span class="sr">    return winner_found;</span>
</span><span class='line'><span class="sr">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>(Note that I have not shown other refactoring that I would do, as it would distract from the point.)</p>

<p>By changing the comment to a method call, the code is now more &ldquo;self documenting&rdquo; and the intent is clear by the method call.</p>

<p>When I suggested this to the programmer, she resisted the idea noting that a method call would affect performance. For a tic-tac-toe problem, this is a specious argument. However, is there merit to it? Will a modern compiler optimize this kind of refactoring? And this brings up a broader question, should we optimize code for performance or readability when we are writing it? Conventional wisdom says we should write code that is clean and easy to understand, and when we are done and have performance analysis with production data, then we know where to spend engineering effort to optimize critical sections. The one exception would be algorithm complexity and running times. (e.g. O(N) vs O(NxN)</p>

<p>I&rsquo;m now curious, is this a &ldquo;comment smell&rdquo;? Can comments be indicators to us programmers that the code we just wrote isn&rsquo;t very clear. The comment itself my inform us on how we need to refactor the code to make it more readable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD: small Ah-Ha moment on when to use a hash instead of an array]]></title>
    <link href="http://professor.github.io/toddsedano/2012/07/20/tdd-small-ah-ha-moment-on-when-to-use-a-hash-instead-of-an-array.html"/>
    <updated>2012-07-20T13:34:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2012/07/20/tdd-small-ah-ha-moment-on-when-to-use-a-hash-instead-of-an-array</id>
    <content type="html"><![CDATA[<p>I&rsquo;m sharing a pleasant surprise I had during a recent Test Driven Development coding session. My tests had found a design that was delightful to me. TDD suggested that I use a hash where my natural tendency is to use an array.</p>

<p>For the purpose of clarity, I&rsquo;m simplifying a very complicated data structure for this example. Let&rsquo;s say we wanted to show the user the most popular cheat codes for a set of video games. For the sake of the example, let&rsquo;s assume that this information is stored in the database in a way that is rather difficult to access. Thus the need for a method &ldquo;most_popular_cheats&rdquo; to do the heavy lifting.</p>

<p>Let&rsquo;s recall some popular cheat codes. Contra&rsquo;s cheat code is &ldquo;UP, UP, DOWN, DOWN, LEFT, RIGHT, LEFT, RIGHT, B, A, START&rdquo;  and Mike Tyson&rsquo;s cheat code is &ldquo;007-373-5963&rdquo;</p>

<p>From the control flow, I would already know the order of the video games that needed cheat codes, and expected that the method &ldquo;most_popular_cheats&rdquo; would just return an array.</p>

<p>However, as I wrote the test first, I realized that the test wouldn&rsquo;t know the exact order of the video games. After I created some test data in the database, I wasn&rsquo;t certain how they would be retrieved, would the default sorting be by ID, or by name? The test didn&rsquo;t know and I didn&rsquo;t think the test should care. If the method returned a hash, I could just see if the hash contained the key->value pairs that I expected.</p>

<pre><code>Hash: {contra.id =&gt; "UP, UP….", mike_tyson.id =&gt; "007-373-6963"}
</code></pre>

<p>On previous projects, following the traditional &ldquo;code then test&rdquo; development style, I have generated two parallel arrays to solve this problem kind of problem. One that contained the answer (what is my value in my hash), and the other that contained the index (what is my key in my hash.) On those projects, it had not occurred to me that a hash was a better data structure. My tests informed me on a programming nuance that I had previously missed.</p>

<p>Here&rsquo;s the simplified version of test case that lead me to this small ah-ha moment.</p>

<pre><code>contra = FactoryGirl.create(:video_game_with_popular_cheats)
mike_tyson = FactoryGirl.create(:video_game_with_popular_cheats)

popular_game_cheats = Game.most_popular_cheats
popular_game_cheats = should be_a_kind_of(Hash)
popular_game_cheats[contra.id].should = "UP, UP, DOWN, DOWN, LEFT, RIGHT, LEFT, RIGHT, B, A, START"
popular_game_cheats[mike_tyson.id].should = "007-373-5963"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Test Driven Development (TDD) through katas]]></title>
    <link href="http://professor.github.io/toddsedano/2012/06/01/learning-test-driven-development-tdd-through-katas.html"/>
    <updated>2012-06-01T12:53:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2012/06/01/learning-test-driven-development-tdd-through-katas</id>
    <content type="html"><![CDATA[<p>In my graduate course, &ldquo;craft of software development&rdquo; students created individual learning plans to accomplish their goals. Many choose to enhance their testing and design skills by focusing on Test Driven Development. (TDD)</p>

<p>While the data sample is low (5 students), it appears that doing katas followed by a project is preferred to just doing katas alone. By working through a kata, you practice the the skill in a very focused, tactile manner on a small problem. Once done, you can compare many posted kata solutions on the internet and use them for reflection. Then by working on a project, you can practice TDD while dealing with domain specific issues and complexities that arise from a larger problem. One student found that re-implementing a previous project was immensely valuable, as he was able to compare his new solution to his previous implementation.</p>

<p>Not all katas are created equal for the purpose of learning TDD. Some are too simple; some are too algorithmic in nature. (For these, creating the test suite is straightforward, yet improving running time is not.) Swapna Varghese ordered a set of katas for how easy they are to implement in TDD. Note that the ones at the end of the list are not necessarily better at teaching TDD, in fact, it may be hard to complete them using TDD.</p>

<p>A suggested path then would be to take an easy one (e.g. one of the first three) as a warm-up exercise to validate your test environment, and then move onto some in the middle. I&rsquo;m partial towards Gilded Rose. Mars Rover was a definite favorite among my students. As with Goldlocks, it wasn&rsquo;t too simple, it wasn&rsquo;t too algorithmic, it &ldquo;was just right.&rdquo;</p>

<p>Exhibit 1: Katas sorted by how easy it is to apply TDD.</p>

<ol>
<li><a href="" title="http://codingdojo.org/cgi-bin/wiki.pl?KataFizzBuzz">Fizz Buzz</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/prime-factors-kata">Prime Factors</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/string-calculator">String Calculator</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/gilded-rose-kata">Gilded Rose</a></li>
<li><a href="" title="http://codingdojo.org/cgi-bin/wiki.pl?KataWordWrap">Word Wrap</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/tennis-game-kata">Tennis Game</a></li>
<li><a href="" title="http://butunclebob.com/ArticleS.UncleBob.TheBowlingGameKata">Bowling Game</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/mars-rover-kata">Mars Rover</a></li>
<li><a href="" title="http://codingdojo.org/cgi-bin/wiki.pl?KataRomanNumerals">Roman Numerals</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/coin-change-kata">Coin Change</a></li>
<li><a href="" title="http://codingdojo.org/cgi-bin/wiki.pl?KataGameOfLife">Game of Life</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/potter-kata">Potter</a></li>
</ol>


<p><p>Not helpful in learning TDD: <a href="" title="http://craftsmanship.sv.cmu.edu/posts/weighing-with-stones-kata">Weighing with Stones</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Career and Software Craftsmanship]]></title>
    <link href="http://professor.github.io/toddsedano/2011/05/04/career-and-software-craftsmanship.html"/>
    <updated>2011-05-04T23:29:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2011/05/04/career-and-software-craftsmanship</id>
    <content type="html"><![CDATA[<p>Students in the craft of software development course read Sections &ldquo;Walking the long road&rdquo; and &ldquo;Draw your own map&rdquo; in the Apprenticeship Patterns book. We then discussed whether their notions of their career had been affected by the course and the readings. During our conversation, some students talked about the idea that people can&rsquo;t stay technical their entire careers. (I see this as a misperception, and discussed several people I know who are still programming late into their careers.)
My full time students are actively interviewing for jobs when they graduate. Most had not considered looking for a job that would enhance their software craftsmanship skills, while salary, prestige of the company, and projects they were working on dominated their searching process.
From my Improv for Software Engineers course, I have noticed that my master students who are in their 20&rsquo;s and 30&rsquo;s have a hard time picturing their future in great detail and will actively refuse to consider life later on unless coached carefully to do so. They lump ages 50 to 80 in one bucket, the distant future. In my improv exercise, I have them walk around the room and I ask them to picture life as it was when they are a certain age. For the most part, they are able to recall and relive life at the age of 7, 12, 18, 23. However, as we get into the future, it&rsquo;s harder for them, and after the age of 60 most stop the exercise and resort to comedy to deal with the tension of thinking about the distant future.
We discussed two hypothetical job offers. One pays $20,000 more money, the other allows them to grow their software development skills. Which one would they pick?
While the conversation was enlightening for the students, I wonder how much of this will stick when they are in the throes of making job offer decisions. (Action item) It would be interesting to survey the students the students once they are in their jobs to discover how many offers they had and what was their decision making process to get to the final offer. In other words, did our intellectual conversation about their careers have an immediate impact on their choices a few months from now?
Here are the responses from each of my students:</p>

<ul>
<li>The reading made me think about my short-term and long-term vision of my career. I have not reached an answer, but I definitely have to think about which of the following is most important: a) advancement for position and salary b) enjoying the work and working on what I want and what interests me.</li>
<li>Before reading the Apprenticeship Patterns, I didn&rsquo;t think about actively trying to improve my skills as a software engineer / craftsman. It was all about doing just enough to get the job done!</li>
<li>The reading has made me realize that there is a huge learning curve before I could reach anywhere near to being an expert software developer</li>
<li>Thinking about where I want to be 10+ years down the line is hard; planning so far in advance is a bit undesirable. Staying technical my work like is an interesting idea.</li>
<li>Made me think long term about my career options and whether or not to stay a developer the entire way or to take other options that open up later on</li>
<li>Made me think of where I want to be in 15 years. I don&rsquo;t want to be a programmer for life.</li>
<li>The reading makes me think about whether I want to be a fully technical guy or not. It&rsquo;s hard to coordinate your interests and job requirements</li>
<li>Dream about myself 10,20,30,40 years. What if my manager asked me to fill in a management role? Should I pass for the sake of programming?</li>
<li>I always hear that you can not continue coding for living! even after I reach 40s of age. How I might change my mind about that?</li>
<li>The reading talks about setting long term goals. This led me to reset my current goal (which is short term.)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Readability Process]]></title>
    <link href="http://professor.github.io/toddsedano/2011/03/30/code-readability-process.html"/>
    <updated>2011-03-30T19:36:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2011/03/30/code-readability-process</id>
    <content type="html"><![CDATA[<h2>Rationale</h2>

<p>As software developers, we want to create clean code, code that is easy for other software developers to read. Ironically, we often don&rsquo;t receive much feedback on our code when we are writing it. Some companies will do code reviews, and the code review feedback may help us write clean code, but we may not understand how other developers are confused. This process allows the programmer to see first hand, what is causing another developer difficulty when they read the code.</p>

<h2>Process</h2>

<p>Preparation) There are two roles, a Programmer (someone who has created code) and a Reader (someone who will review provided code). I am an observer of the process.</p>

<p>The Programmer will select recent production code that they have produced. I do not need to see the code and would prefer not to see it. I&rsquo;d prefer for you to select the most recent code you have created because then you won&rsquo;t be tempted to pick &ldquo;perfect&rdquo; or &ldquo;ideal&rdquo; code. We&rsquo;re just looking for typical code and presumably whatever you wrote recently is typical.</p>

<p>I&rsquo;ll prompt the Reader with some open ended questions. The job of the Programmer is to simply receive the feedback.</p>

<p>Step 1) Programmer, provide some context by explaining the user story (or story card) behind the code. Describe the requirements at a high level in business terms. The Reader should have some notion of the problem the Programmer was trying to solve and the added business value.</p>

<p>Step 2) Reader, read through the code and think out lowd about your initial reaction and your thought process for understanding the code. If things are clear, mention that. If something is confusing, mention the questions that you are thinking. Reason outlowd. There are no wrong answers, this is an opportunity for the Programmer to see how another developer interacts with their code. Provide them with your first impressions.</p>

<p>Do this until you&rsquo;ve walked through the code and think you understand it.</p>

<p>Step 3) Programmer, thank the Reader for their invaluable input. Please just say &ldquo;Thank You&rdquo; &mdash; there is no need to defend your code</p>

<p>Step 4) Reader, do you see ways to refactor the code? Are there opportunities to make it more dry?</p>

<p>Step 5) Reader, if the Programmer left the company and you had to maintain this code, could you do it?</p>

<p>Step 6) Programmer, are there any clarifying questions that you have for the Reader about their comments? (For example, is there something may be very clear to you, but wasn&rsquo;t clear to the Reader. This is your opportunity to better understand how you could make it more clear.)</p>

<p>Step 7) Programmer, reflect on this experience and describe what was the most useful aspect of it?</p>

<p>Step 8) Programmer, was this worth your time?</p>

<p>Step 9) Programmer, please fill in the survey response to this exercise</p>

<h2>History</h2>

<p>While teaching &ldquo;the craft of software development&rdquo; to my masters students, one of my students wanted to write more readable code. I challenged each student to come up with metrics to see if they were improving. The student couldn&rsquo;t think of any. I realized that he would need to show his code to another developer to find out if the code was readable. He could track the feedback as a metric as seen in the comic: <a href="http://www.osnews.com/story/19266/WTFs_m">http://www.osnews.com/story/19266/WTFs_m</a></p>
]]></content>
  </entry>
  
</feed>
