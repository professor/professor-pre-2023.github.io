<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software Engineering | Todd Sedano]]></title>
  <link href="http://professor.github.io/blog/categories/software-engineering/atom.xml" rel="self"/>
  <link href="http://professor.github.io/"/>
  <updated>2017-11-09T11:31:22-08:00</updated>
  <id>http://professor.github.io/</id>
  <author>
    <name><![CDATA[Todd Sedano]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning Test Driven Development (TDD) through katas]]></title>
    <link href="http://professor.github.io/toddsedano/2012/06/01/learning-test-driven-development-tdd-through-katas.html"/>
    <updated>2012-06-01T12:53:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2012/06/01/learning-test-driven-development-tdd-through-katas</id>
    <content type="html"><![CDATA[<p>In my graduate course, &ldquo;craft of software development&rdquo; students created individual learning plans to accomplish their goals. Many choose to enhance their testing and design skills by focusing on Test Driven Development. (TDD)</p>

<p>While the data sample is low (5 students), it appears that doing katas followed by a project is preferred to just doing katas alone. By working through a kata, you practice the the skill in a very focused, tactile manner on a small problem. Once done, you can compare many posted kata solutions on the internet and use them for reflection. Then by working on a project, you can practice TDD while dealing with domain specific issues and complexities that arise from a larger problem. One student found that re-implementing a previous project was immensely valuable, as he was able to compare his new solution to his previous implementation.</p>

<p>Not all katas are created equal for the purpose of learning TDD. Some are too simple; some are too algorithmic in nature. (For these, creating the test suite is straightforward, yet improving running time is not.) Swapna Varghese ordered a set of katas for how easy they are to implement in TDD. Note that the ones at the end of the list are not necessarily better at teaching TDD, in fact, it may be hard to complete them using TDD.</p>

<p>A suggested path then would be to take an easy one (e.g. one of the first three) as a warm-up exercise to validate your test environment, and then move onto some in the middle. I&rsquo;m partial towards Gilded Rose. Mars Rover was a definite favorite among my students. As with Goldlocks, it wasn&rsquo;t too simple, it wasn&rsquo;t too algorithmic, it &ldquo;was just right.&rdquo;</p>

<p>Exhibit 1: Katas sorted by how easy it is to apply TDD.</p>

<ol>
<li><a href="" title="http://codingdojo.org/cgi-bin/wiki.pl?KataFizzBuzz">Fizz Buzz</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/prime-factors-kata">Prime Factors</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/string-calculator">String Calculator</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/gilded-rose-kata">Gilded Rose</a></li>
<li><a href="" title="http://codingdojo.org/cgi-bin/wiki.pl?KataWordWrap">Word Wrap</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/tennis-game-kata">Tennis Game</a></li>
<li><a href="" title="http://butunclebob.com/ArticleS.UncleBob.TheBowlingGameKata">Bowling Game</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/mars-rover-kata">Mars Rover</a></li>
<li><a href="" title="http://codingdojo.org/cgi-bin/wiki.pl?KataRomanNumerals">Roman Numerals</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/coin-change-kata">Coin Change</a></li>
<li><a href="" title="http://codingdojo.org/cgi-bin/wiki.pl?KataGameOfLife">Game of Life</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/potter-kata">Potter</a></li>
</ol>


<p><p>Not helpful in learning TDD: <a href="" title="http://craftsmanship.sv.cmu.edu/posts/weighing-with-stones-kata">Weighing with Stones</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improv meets Software Engineering, what might the intersection look like?]]></title>
    <link href="http://professor.github.io/toddsedano/2011/06/16/improv-meets-software-engineering.html"/>
    <updated>2011-06-16T21:32:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2011/06/16/improv-meets-software-engineering</id>
    <content type="html"><![CDATA[<p>When I first discovered improv, I enjoyed the creative play and sheer freedom it offered me. The basic tenets of improv gave me a safe place to unleash my creativity. The right side of my brain finally had an outlet. (I couldn&rsquo;t draw or play an instrument. I did enjoy singing, but I knew not to do that in a public setting!) I enjoyed every improv exercise that was introduced to me. Finally, I had an outlet to be creative and to play.</p>

<p>For the longest time, I didn&rsquo;t see how this could apply to software development. Deep down, I knew there must be a connection, but how could doing quick, fun exercises relate to software?</p>

<p>I did see how improv was affecting me and my style. My public speaking confidence was increasing. I was faster with responses to tough questions. My eye contact with others was on the rise. While I&rsquo;ve been an active listener, I noticed areas that I could grow. I saw how those skills translated directly to my work. Brainstorming was more effective when we bypass the critical analytical components of the brain. Teams could be more effective if they could more readily accept ideas from teammates. (If we don&rsquo;t agree with an idea, we tend not to accept it. However we can accept an offer from someone else without agreeing with it. Even with a ridiculous suggestion, good ideas can emerge.)</p>

<p>In preparing for the Applied Improvisors Network (AIN) conference of 2011, I reflected on software development and its intersection with improv. I came to a new realization, are not the agile methods aligned with the notions of improv? Let&rsquo;s look at ideas from improv and see how they map into modern software development.</p>

<p>The whole improve troop owns the show. If a performer steps out on stage, they are committing to the team that they have five seconds worth of an idea and trusts that the rest of the team will help them the rest. Agile methods encourage &ldquo;whole team&rdquo; where the entire team responsible for ownership of software development and management. This encourage collective owning of the source code repository where any member of the team can make changes as well as the notion that the team can manage itself. Improvisators set out to make their partner look good. Scene work happens when the entire troupe is helping and working together. This includes knowing when to go on stage in order to further a scene along and knowing when not to go on stage because everything is going to work out fine.Software developers want their team to look good.</p>

<p>Change: Improv thrives in chaotic situations. Improvisers are trained to deal with change. When improvisers are operating at the speed of thought on stage, anything can happen, and improvers try to make sense of it all. Agile methods are more ideal than traditional methods in environments where the requirements are changing. Even Extreme Programming&rsquo;s slogan is &ldquo;embrace change&rdquo;</p>

<p>Improvisers learn to be loose with their own ideas. In the dynamic environment of the stage, they need to be present in the moment, dealing with what is going on. If they are thinking too much about where they want the scene to head, they will miss out on where the scene is actually going. You can observe this when a performer says something that sounds like they weren&rsquo;t listening to what was just said. The performer was &ldquo;in their head&rdquo; trying to plan ahead and missed the last offer from their peer. We see this flexibility in the agile principals. With Test Driven Development, software developers hold the code loosely. Code written yesterday might be refactored and improved today. There isn&rsquo;t this notion of ideal or prefect software that never changes. As the situation changes, so does the code.</p>

<p>Improvisers work on actively listening. Extreme Programming&rsquo;s on site customer provides a direct customer voice into the software development process. As the engineer understands in real time the requirements from the customer, software is developed and refined in quick coding cycles.</p>

<p>Improvisers have techniques to celebrate failure. This is imperative because improvisers will fail. In warm up games, improvisers that aren&rsquo;t failing aren&rsquo;t playing them too safely. Agile methods have quick iterations and rapid software prototyping that allows for (in a software sense) for features to be explored and &ldquo;fail.&rdquo; If something isn&rsquo;t working right it is tweaked in the next iteration. Albeit the timeframe is different. Obviously improvisers fail numerous times during a warm up and might make unusual choices on stage, where as the timeframe on requirements churn might be the next iteration typically one week to four weeks. In a paired programming setting, ideas can be tried and experimented upon. Failure in this context may happen routinely during a coding session. Coder 1: Should this be a new class or should we modify an existing class? Coder 2: I don&rsquo;t know, let&rsquo;s try option 1. After a few minutes if option 1 isn&rsquo;t working out, they can quickly switch to option 2.</p>

<p>Interestingly, the improv game &ldquo;word at a time&rdquo; maps into paired programming. In &ldquo;word at a time&rdquo; a group tells a story with each person saying only one word. This exercise teaches shared ownership and the frustration of planning ahead. Variants of the game include &ldquo;one sentence at a time&rdquo; or &ldquo;1, 2, 3, 4, 3, 2, 1 words at a time.&rdquo; In paired programming, developers work on the same code at the same time. Typically the code is shown on one monitor but there are two keyboards and two mice so that at any point in time, either developer can start typing what they are thinking. There are many benefits to paired programming including high quality product with less defects, a product that is ready to be shipped sooner, team ownership of the entire code based (as opposed to code silos owned by a single programmer), shared understanding of the code base (every line of code was written by two people, if one leaves the company someone else knows what that code was doing). Often in pair programming, developers may take turns. I&rsquo;ll write a test case and my partner will make the code work. They will then write a test case, and I&rsquo;ll then get it to work. This practice is called ping-pong paired programming. This is much like &ldquo;A paragraph at a time&rdquo; The emphasis is on the dialogue between the two engineers and the code is the artifact of the conversation that happened.</p>

<p>Today, I see many similarities between improv and software development. I suspect that there are new concepts in software development that might be explored given insights in improv. That is a topic of more future research.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Readability Process]]></title>
    <link href="http://professor.github.io/toddsedano/2011/03/30/code-readability-process.html"/>
    <updated>2011-03-30T19:36:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2011/03/30/code-readability-process</id>
    <content type="html"><![CDATA[<h2>Rationale</h2>

<p>As software developers, we want to create clean code, code that is easy for other software developers to read. Ironically, we often don&rsquo;t receive much feedback on our code when we are writing it. Some companies will do code reviews, and the code review feedback may help us write clean code, but we may not understand how other developers are confused. This process allows the programmer to see first hand, what is causing another developer difficulty when they read the code.</p>

<h2>Process</h2>

<p>Preparation) There are two roles, a Programmer (someone who has created code) and a Reader (someone who will review provided code). I am an observer of the process.</p>

<p>The Programmer will select recent production code that they have produced. I do not need to see the code and would prefer not to see it. I&rsquo;d prefer for you to select the most recent code you have created because then you won&rsquo;t be tempted to pick &ldquo;perfect&rdquo; or &ldquo;ideal&rdquo; code. We&rsquo;re just looking for typical code and presumably whatever you wrote recently is typical.</p>

<p>I&rsquo;ll prompt the Reader with some open ended questions. The job of the Programmer is to simply receive the feedback.</p>

<p>Step 1) Programmer, provide some context by explaining the user story (or story card) behind the code. Describe the requirements at a high level in business terms. The Reader should have some notion of the problem the Programmer was trying to solve and the added business value.</p>

<p>Step 2) Reader, read through the code and think out lowd about your initial reaction and your thought process for understanding the code. If things are clear, mention that. If something is confusing, mention the questions that you are thinking. Reason outlowd. There are no wrong answers, this is an opportunity for the Programmer to see how another developer interacts with their code. Provide them with your first impressions.</p>

<p>Do this until you&rsquo;ve walked through the code and think you understand it.</p>

<p>Step 3) Programmer, thank the Reader for their invaluable input. Please just say &ldquo;Thank You&rdquo; &mdash; there is no need to defend your code</p>

<p>Step 4) Reader, do you see ways to refactor the code? Are there opportunities to make it more dry?</p>

<p>Step 5) Reader, if the Programmer left the company and you had to maintain this code, could you do it?</p>

<p>Step 6) Programmer, are there any clarifying questions that you have for the Reader about their comments? (For example, is there something may be very clear to you, but wasn&rsquo;t clear to the Reader. This is your opportunity to better understand how you could make it more clear.)</p>

<p>Step 7) Programmer, reflect on this experience and describe what was the most useful aspect of it?</p>

<p>Step 8) Programmer, was this worth your time?</p>

<p>Step 9) Programmer, please fill in the survey response to this exercise</p>

<h2>History</h2>

<p>While teaching &ldquo;the craft of software development&rdquo; to my masters students, one of my students wanted to write more readable code. I challenged each student to come up with metrics to see if they were improving. The student couldn&rsquo;t think of any. I realized that he would need to show his code to another developer to find out if the code was readable. He could track the feedback as a metric as seen in the comic: <a href="http://www.osnews.com/story/19266/WTFs_m">http://www.osnews.com/story/19266/WTFs_m</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rethinking regex]]></title>
    <link href="http://professor.github.io/toddsedano/2010/11/18/rethinking-regex.html"/>
    <updated>2010-11-18T12:13:00-08:00</updated>
    <id>http://professor.github.io/toddsedano/2010/11/18/rethinking-regex</id>
    <content type="html"><![CDATA[<p>What if regular expressions were easy to write?</p>

<p>While attending the Golden Gate Ruby Conference 2010, I attended a session about Arel and how Rails was changing their ORM layer to make it easier to incrementally build the query.</p>

<p>Old: Article.find(:all, :order => &ldquo;published_at desc&rdquo;, :limit => 10)</p>

<p>New: Article.order(&ldquo;published_at desc&rdquo;).limit(10)</p>

<p>It occurred to me that this concept of simplifying could be applied to regular expression.</p>

<p>While I have time, I&rsquo;ll continue to build up examples of what the syntax could look like.</p>

<p>Random thoughts:</p>

<p>What: not a number</p>

<ul>
<li>ie a string that can&rsquo;t be convert to a number</li>
<li>A string that contains at least on character</li>
<li>Regex: /^.<em>\D+.</em>$/</li>
<li>Positive examples: 113t23io10908-113</li>
<li>Negative examples: 13431</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Engineering Craft (or Software Engineering as a performance art)]]></title>
    <link href="http://professor.github.io/toddsedano/2010/05/29/software-engineering-craft-or-software-engineering-as-a-performance-art.html"/>
    <updated>2010-05-29T14:59:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2010/05/29/software-engineering-craft-or-software-engineering-as-a-performance-art</id>
    <content type="html"><![CDATA[<p>Experiment with full time students this summer to explore this topic.</p>

<p>In a language and framework of their choice, have students select a short project to build, ie a blog website, or twitter client mobile application. Include testing. In the first session, build the project. (Time it.) Repeat again. Repeat again. Repeat again. After each session reflect on what you learned. Was there insights about the IDE? Where there key command short cuts? Do your test cases get better from defects from previous sessions, or do they get worse because of short cuts? Is there an aspect of the technology that you are deficient in that requires additional practice? (Katana example) Look for trends across the student population.</p>

<p>Based upon trends across the student population, identify further areas of practice.</p>

<p>Try same experiment with paired programming.</p>

<p><a href="http://github.com/edgecase/ruby_koans">http://github.com/edgecase/ruby_koans</a></p>

<p>Inspiration: improv &ndash; learning scene work or singing a song from scratch. Take an impossible task and break into small concrete steps. Slowly build upon the steps to reach the goal. Sometimes explore the concept of each step with positive and negative examples.</p>

<p>Inspiration: Katana for TDD</p>

<p>Inspiration: Learning to play the piano. Strength building exercises. The whole point of the exercise is to build up . Much like dance where there are patterns, technique and skill aspects to a class. The patterns make learning dancing fun and motivate the student to keep going. Playing a song is rewarding. Working on skill is tedious but makes the fun stuff more accessible and easier to accomplish.</p>

<ul>
<li><a href="http://rubyquiz.com/">http://rubyquiz.com/</a></li>
<li>Ruby Koans &ndash; <a href="http://github.com/edgecase/ruby_koans">http://github.com/edgecase/ruby_koans</a></li>
<li>Javascript learning &ndash; <a href="http://ejohn.org/apps/learn">http://ejohn.org/apps/learn</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
