<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Todd Sedano]]></title>
  <link href="http://professor.github.io/atom.xml" rel="self"/>
  <link href="http://professor.github.io/"/>
  <updated>2018-02-03T14:15:33-08:00</updated>
  <id>http://professor.github.io/</id>
  <author>
    <name><![CDATA[Todd Sedano]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Considerate Pair Programming - Part 1]]></title>
    <link href="http://professor.github.io/toddsedano/2017/10/24/considerate-pair-programming.html"/>
    <updated>2017-10-24T08:37:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2017/10/24/considerate-pair-programming</id>
    <content type="html"><![CDATA[<h2>Why We Pair</h2>

<p>Hi. I have come to love Pair Programming. I enjoy the collaboration, cross-training, and better solutions that emerge while I pair.</p>

<p>Continuous Pair programming with Overlapping Pair Rotations removes knowledge silos to increase teams&#8217; resiliency to team disruption [<a href="https://www.researchgate.net/publication/304014117_Sustainable_Software_Development_through_Overlapping_Pair_Rotation?ev=prf_high">reference</a>]  and builds collective code ownership [<a href="https://www.researchgate.net/publication/301612260_Practice_and_Perception_of_Team_Code_Ownership?ev=prf_high">reference</a>] as described in Sustainable Software Development.</p>

<p>Pair programming is a complex practice requiring skill to master. Although Pair Programming has been around for 20 years and is well researched, some teams simply drop engineers onto a team expecting them to figure Pair Programming out.</p>

<p>As a practitioner, I am still discovering ways that I can improve the pair programming dynamic.</p>

<p>This article describes 1) several techniques that can improve your pair programming experience, 2) strategies on what to do when things get frustrating or go wrong, and 3) concludes with success stories of converting difficult pair-programming relationships into successful pair-programming relationships.</p>

<p>Like any relationship, such as friendships, family dynamics, dating, or marriage, when pairing works well, it is an amazing experience; when pairing falls apart, it can be frustrating and occasionally super hurtful. While unfortunate dynamics can happen while pairing, I have experienced the joy of finding each other in the rift.</p>

<p>Pairing exposes both our strengths and our weakness. How we handle our weaknesses may have a direct impact on the pairing relationship. One of us might not be comfortable exposing our weaknesses. If we are experiencing imposter syndrome, feeling that we are not qualified for the job we have, we might fear that our partner is going to find out that we are faking it.</p>

<p>I have been on a journey to be a better pair. While at Pivotal over 3.5 years, I have paired with ~39 pivots and ~ 20 client developers. I am grateful to each person who has helped me better understand myself and have helped me assemble and create these techniques. If you paired with me and I did not apply the technique, it may be because I learned it later.</p>

<!-- more -->


<p>This is Part One in a three part series covering strategies, techniques, and tips for Considerate Pair Programming.</p>

<p><a href="http://sedano.org/toddsedano/2017/10/24/considerate-pair-programming.html">Part One</a> covers <em>Why We Pair</em> and <em>Setting up the Work Environment</em> for success.</p>

<p><a href="http://sedano.org/toddsedano/2017/10/23/considerate-pair-programming.html">Part Two</a> covers <em>Strategies for Success</em> including</p>

<ul>
<li><p>welcoming interactions at different parts of the day,</p></li>
<li><p>reflecting on the pair programming experience, and</p></li>
<li><p>reframing interactions for growing collaboration.</p></li>
</ul>


<p><a href="http://sedano.org/toddsedano/2017/10/22/considerate-pair-programming.html">Part Three</a> covers what to do <em>When Things Go Weird</em></p>

<p>Remote pairing presents its own set of challenges. See <a href="http://sedano.org/toddsedano/2016/11/07/remote-pair-programming.html">my remote pairing blog post</a> for techniques to improve remote pairing effectiveness.</p>

<p><em>Our overarching goal is to create a welcoming and safe environment for both pairs.</em></p>

<h2>Setting up the Work Environment</h2>

<p><strong>The computer</strong></p>

<p>What: Configure the work environment to make pair programming effective. Set up a pairing workstation with two monitors, two keyboards, two mice, and one computer. Make sure there is ample room for two people to work side by side at one desk. Ideally, all the team&rsquo;s machines are similar in configuration enabling frictionless pair rotations. Pivotal uses <a href="https://github.com/pivotal/workstation-setup">workstation-setup</a> when adding new machines to a team to provide a consistent experience with common tools.</p>

<p>Why: a welcoming environment that enables both pairs to work efficiently improves productivity.</p>

<p>Anti-pattern: Avoid using individual laptops for pair programming. After seven projects using pairing workstations, I joined a team that used laptops with external monitors for pairing. The team did not view laptops as communal team property. Each person configured their laptop differently suiting their personal development process. One pair ignored my feedback about the development environment.  At the time, I felt like an unwelcomed guest in someone else&rsquo;s home.</p>

<p><strong>The physical environment</strong></p>

<p>What: Create a conducive work environment that treats each person as an equal.</p>

<p>Why: Small physical differences can create power imbalances.</p>

<p>Example: On one project, we had a window seat. We intentionally rotated everyone through the more desirable location.</p>

<p>Example of simultaneously standing and sitting: On one project we used varidesks to allow each person to be able to stand or sit whenever they felt like it. Often I would mirror my partner. If they stood, I stood. If they sat, I sat. At some point, I broke away from this rhythm. Initially, the status dynamic felt unequal whenever one of us stood and the other sat. After acknowledging the differences, and practicing it both ways, I am now ok with the dynamic. However, when beginning new pairing relationships, I would prefer to describe my experience and check-in with my pair before creating a potential power imbalance.</p>

<p><span class="thumbnail-image-block ssNonEditable"><span><img src="http://professor.github.io/images/bad-pairing-setup-depth.jpg" alt="Developer pair programming"/></span></span></p>

<p>Imbalance in desk depth.</p>

<p>Anti-pattern: For one project, the table did not have a straight edge. One side of the table had more depth and the other side was shallower.  The difference was 15 centimeters (6 inches). The side with more desk spaces felt like the dominant side, whereas the side with less desk space felt less important and inferior. Possible solutions include changing team space or buying replacement desk pieces for that cubicle vendor.</p>

<p><span class="thumbnail-image-block ssNonEditable"><span><img src="http://professor.github.io/images/bad-pairing-setup-width.jpg" alt="Developer pair programming"/></span></span></p>

<p>Imbalance in sharing space.</p>

<p>Anti-pattern: I saw two people pairing in this space. The person on the left has ⅓ of the space. The person on the right has ⅔ of the space. Interestingly, the desk&rsquo;s seam is exactly between the two monitors which may explain this odd configuration.</p>

<p>(I only saw these two people in this space for one day. They were visitors to the building and had planned to talk to one of them the next time I saw them. If I had a do-over, I would like to have raised this issue with them.)</p>

<p>Here’s an example which equalizes the physical environment. It does not matter which side you pick for the day. <span class="thumbnail-image-block ssNonEditable"><span><img src="http://professor.github.io/images/good-pairing-setup.jpg" alt="Developer pair programming"/></span></span></p>

<p>Thank you to John Ryan and Ian Ornstein for their feedback on this series.</p>

<h2>Summary</h2>

<p>We want to create a space that is welcoming for pair programming and treats each person as an equal.</p>

<p>I started experimenting and developing these techniques when I suffered through some difficult pair programming experience. If you have had a challenging experience, I would like to hear what it was like for you and how you went about solving it. Email me at <a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#x3a;&#112;&#114;&#x6f;&#102;&#x65;&#115;&#x73;&#111;&#114;&#x40;&#x67;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#x6d;">&#x70;&#x72;&#111;&#102;&#x65;&#115;&#115;&#111;&#114;&#64;&#103;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></p>

<p>You might enjoy the <a href="http://sedano.org/book">book</a> I&rsquo;m working on. The book describes how Pivotal leverages pair programming and several other practices so that its teams can survive major disruptions.
<a href="http://sedano.org/book"><img border="0" src="http://professor.github.io/images/book3.png" alt="Brady Bunch View"/></a></p>

<p><sup>Sustainable Software Development: Extreme Programming Evolved &trade;</sup></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Considerate Pair Programming - Part 2]]></title>
    <link href="http://professor.github.io/toddsedano/2017/10/23/considerate-pair-programming.html"/>
    <updated>2017-10-23T08:37:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2017/10/23/considerate-pair-programming</id>
    <content type="html"><![CDATA[<h2>Strategies for Success in Pair Programming</h2>

<p>In my software development practice, I rely on several techniques for increasing the probability of success with a pairing relationship.</p>

<p>This article contains a toolbox of techniques. Feel free to pick a few to try out and then revisit the list in a few weeks.</p>

<p><em>Become invested in your pair’s success</em> is the major take-away. When I am taking care of myself and looking out for my pair, an incredible friendship can form. Consider “what are my pairs strengths? And how do they map to my weaknesses?” and vice-versa. Have I <em>always</em> been invested in my pair&rsquo;s success? No. My pairs probably have stories on how I could have improved in my pairing. Shifting from “what is in it for me” to “what is in it for us” enables new pairing dynamics.</p>

<!-- more -->


<p>This is a three part series covering strategies, techniques, and tips for Considerate Pair Programming.</p>

<p><a href="http://sedano.org/toddsedano/2017/10/24/considerate-pair-programming.html">Part One</a> covers <em>Why We Pair</em> and <em>Setting up the Work Environment</em> for success.</p>

<p><a href="http://sedano.org/toddsedano/2017/10/23/considerate-pair-programming.html">Part Two</a> covers <em>Strategies for Success</em> including</p>

<ul>
<li><p>welcoming interactions at different parts of the day,</p></li>
<li><p>reflecting on the pair programming experience, and</p></li>
<li><p>reframing interactions for growing collaboration.</p></li>
</ul>


<p><a href="http://sedano.org/toddsedano/2017/10/22/considerate-pair-programming.html">Part Three</a> covers what to do <em>When Things Go Weird</em></p>

<p>Remote pairing presents its own set of challenges. See <a href="http://sedano.org/toddsedano/2016/11/07/remote-pair-programming.html">my remote pairing blog post</a> for techniques to improve remote pairing effectiveness.</p>

<p><em>Remember that our overarching goal is to to create a welcoming and safe environment for both pairs.</em></p>

<h2>Welcoming Interactions at Different Parts of the Day</h2>

<h3>Introduction and First Impressions</h3>

<p><strong>&ldquo;I am looking forward to pairing with you.&rdquo; </strong></p>

<p>What: Start your day by making your pair feel welcomed. If you are excited to pair, then mention the reasons. People can spot when others are insincere, so only say it if you mean it.</p>

<p>Why: We want our pair to feel welcomed.</p>

<p>When: I use this periodically so that it does not seem formulaic. When pairing with a stranger outside of work, I will include a handshake and introduce myself. &ldquo;Hi, I&rsquo;m Todd, and I&rsquo;m looking forward to pairing with you…&rdquo;</p>

<p><strong>&ldquo;What is your ideal pairing day?&rdquo;</strong></p>

<p>What: I ask my pair to tell me about their ideal pairing day. Some people have never considered the question and are surprised by it. Some need clarification about what I am asking. I will respond with &ldquo;After a day of pairing, when you leave work energized, what caused you to be energizing?&rdquo; or &ldquo;What enables you to have a successful day of pair programming? What do you need from me?&rdquo;</p>

<p>Why: If you both have different goals for the day, talking it out may help you understand your pair&rsquo;s motivations.</p>

<p>When: I do this when I pair with a person for the first time.</p>

<p>The common responses are</p>

<ol>
<li><p>I love it when we deliver lots of stories (these tended to come from client developers);</p></li>
<li><p>I love it when we solve a hard problem;</p></li>
<li><p>I love it when my pair and I are on the same page working harmoniously.</p></li>
</ol>


<h3>Starting a Day</h3>

<p><strong>&ldquo;How is it going?&rdquo;</strong> or <strong>&ldquo;What did you do over the weekend?&rdquo; </strong></p>

<p>What: Take a moment to find out how your partner is doing.</p>

<p>Why: When starting a day with my pair, it is super tempting to jump into the work immediately. We may be eager to start delivering value. I find that I need to stop myself and acknowledge our humanity. I enjoy just checking in with my partner. In American culture, &ldquo;How is it going?&rdquo; can be a throw-away greeting, so I look my pair in the eye and ask &ldquo;How is it going?&rdquo; in a way that communicates that I am honestly interested and curious about their wellbeing.</p>

<p>We are integrated people. Things that happen at home affect us at work and things that happen at work affect us at home. A harrowing adventure on a commute may affect us emotionally and may affect the dynamic between the pair.</p>

<p><strong>&ldquo;I am concerned about _____&rdquo; / Addressing Concerns</strong></p>

<p>What: Reveal any concerns that you have about the day. Discuss anything that might affect the pairing relationship. Your concerns could include the story, the work, or the pairing.</p>

<p>Why: Our feelings or anxiety may affect the pairing relationship. Discussing our feelings helps remove the energy around that feeling. See the section on Sensing Strong Feelings for more details.</p>

<p>Examples: Here are some examples from my experience:</p>

<ul>
<li><p>&ldquo;I am anxious about getting to the root cause of [this tricky technical issue],&rdquo;</p></li>
<li><p>&ldquo;I just had this difficult conversation outside of work and I can tell it&rsquo;s affecting my mood,&rdquo; or</p></li>
<li><p>&ldquo;I am worried that this feature is taking too long to finish.&rdquo;</p></li>
</ul>


<p>Example: One of my pair types at 110 words per minute. Maximum my typing speed is 55 words per minute. I was intimidated by his typing speed. I felt like I was slowing us down. I felt that I had to type faster to be valuable. After a few pairing sessions, I acknowledging what I was feeling. Neither of us changed our behavior, but I was no longer intimidated. It became a non-issue.  Acknowledging the situation allowed me to appreciate how he brought this fantastic skill to us as a pair.</p>

<p>One of my friends calls this <strong>&ldquo;Name the Dragon.&rdquo;</strong> Example: &ldquo;Hey, I am feeling really edgy today because my whole day has been the opposite of what I&rsquo;ve planned, from the moment I woke up&hellip; it&rsquo;s not you, it&rsquo;s me.&rdquo;</p>

<h3>Mid Afternoon Check In</h3>

<p><strong>&ldquo;How is today going for you?&rdquo; </strong>or<strong> &ldquo;What could I be doing differently?</strong>&rdquo;</p>

<p>What:  Check in with your partner about how things are going.</p>

<p>Why: Check-ins shorten the feedback loop. Hypothetically, say you are bothering your pair. How long will it take them to give you unsolicited feedback? A week? A month? Maybe never? It takes courage to provide unsolicited feedback. By broaching the topic and asking for feedback, you can reduce your feedback cycle.</p>

<p>When: About 2/3rds of the way through the workday. I prefer mid-day so that when I receive feedback, I have a chance to practice changing it immediately with that person. At Pivotal, we daily rotate with whom we pair. Asking at the end of the day requires me to wait several days before I have a chance to course correct. I set the alarm on my phone that goes off two hours before the end of the day.</p>

<p>Examples: I have received feedback on keyboard sharing, improvements to my development flow, and an ask for me to be more assertive. I even discovered that I chew gum too loudly.</p>

<p>If your pair might not be comfortable giving feedback, remind them how valuable the feedback is: <strong>&ldquo;I value your feedback as it helps me grow. Please tell me one thing that I could be doing differently.&rdquo; </strong>When hearing feedback, say<strong> &ldquo;Thank you.&rdquo;</strong> Do not argue about it as this appears defensive and your pair may not want to provide feedback again. It is fine to ask clarifying questions for the purpose of understanding their point of view.</p>

<p>If you find that you are not getting any constructive feedback, perhaps your pair is not comfortable giving feedback with you. Work with your manager. Your manager could ask for feedback on your behalf.</p>

<p>When I stop receiving constructive feedback, I ask <strong>&ldquo;How was today less than exceptional?&rdquo;</strong> or <strong>&ldquo;What was less than extraordinary about today?&rdquo;</strong> [<a href="https://itscoffeeti.me/the-art-of-getting-magical-feedback-aa0e48052564">reference</a>] Experiencing an exceptional day is rare. The question sets the bar high, allowing your pair to voice any small improvement.</p>

<h3>End of Day Wrap Up</h3>

<p><strong>Thank your pair for their contributions.</strong></p>

<p>What: Mention particular accomplishments or strengths. Bring up unique ideas they offered.</p>

<p>Acknowledge if you accomplished more with your pair than you would have without them. Feel free to acknowledge the hard parts of the day. <strong>&ldquo;Even though dealing with the build system was frustrating, I enjoyed pairing with you.&rdquo;</strong></p>

<p>Why: This gift ends your pair&rsquo;s day on a high note. This action helps us practice gratitude. On a frustrating day, it is nice to acknowledge the pleasant parts.</p>

<p>When: I aim to do this about five to ten minutes before the end of the day so that I am not keeping my pair past the end of a workday. Some situations will preempt you from doing this action: the team may call a team huddle at the end of the day or you may be working on an energizing story and you both want to finish some part of the work. If I aim to do this every day, then I hope to achieve a good balance with the other interruptions.</p>

<p>The goal is to wrap things up and end the day on a positive note. I try to avoid rehashing or starting a day&rsquo;s reflection; I practice at the Mid Afternoon Check-in instead. I want my pair to feel appreciated and for them to know that I look forward to our next session.</p>

<h2>Reflecting on the Process / Conversations about the process</h2>

<p><strong>&ldquo;How do we improve our development environment?&rdquo;</strong></p>

<p>What: Reflect about the development process.</p>

<p>Why: We want to have efficient development environments. Often an improvement in one development environment benefits the entire team. Discussing the development environment reveals concerns about the setup.</p>

<p>When: periodically</p>

<p>Example: How do we decide which editor to use? At Pivotal, the most common editors are Vim or one of the JetBrains products (IntelliJ, CLion, Gogland, RubyMine, PyCharm, etc.). What do we do when one pair prefers Vim and the other prefers a JetBrains editor? When an expert with a technology is pairing with someone learning the technology, I recommend using the editor that the novice knows best.  The technology might be programming language (c, python, go) or a framework (spring, rails). This strategy allows the novice to focus on learning the technology and the expert has a chance to learn the less familiar development environment. At Pivotal, learning more Vim or more JetBrains makes each engineer a more well-rounded engineer.</p>

<p><strong>&ldquo;How do we reduce feedback time?&rdquo;</strong></p>

<p>What: Discuss the waste from long feedback cycles [<a href="https://www.researchgate.net/publication/313360479_Software_Development_Waste">reference</a>]</p>

<p>Why: We want to have fast feedback loops. Unfortunately, there can be many technical obstacles that get in the way.</p>

<p>When: Discuss this topic when you are suffering from long feedback loops. If there is waiting time, we can use this opportunity to improve the situation and reduce waiting time in the future.</p>

<p>On my first Pivotal project, our test suite took about ten minutes to run. On our last week of the project, my pair and I decided to speed it up. In looking at the tests, we discovered that two of them took the majority of the time. One test grew the size of a cluster. One test created a cluster. One test destroyed a cluster. All of the other tests assumed that a cluster existed. By resequencing our test cases, we were able to speed up our tests significantly. We attempted to always leave a cluster up. By running all the quick tests first, if a test failed we would find it quickly. We then would then grow the cluster, destroy the cluster, and create a cluster thus leaving it in a state for the next test run. This resequencing decreased the test suite running time to a few minutes. We lamented that we had not made the change earlier. By removing waiting time, you enable your team to deliver faster.</p>

<p><strong>Setting a learning goal</strong></p>

<p>At the start of the day you can set a learning goal. &ldquo;Let us work on understanding Test Driven Development today&rdquo; or &ldquo;Let us work on keyboard skills.&rdquo; Try to frame it so that it is more collaborative. At the end of the day, each person provides feedback about the goal. Allowing your pair to know what kind of feedback ahead of time gives them a chance to observe you in action.</p>

<h2>Looking for Gold</h2>

<p>What: In the improv game called  &ldquo;That&rsquo;s Brilliant!,&rdquo; a team member offers a terrible, impractical solution for a problem.  The group then uses the suggestion to look for divergent ideas that could help us solve the problem. The team mines the ridiculous suggestion looking for gold. This game trains the team to stop, consider, unpack, and explore suggestions offered by teammates.</p>

<p>Why: I am strongly tempted to disregard an absurd suggestion from my partner and move on to more &ldquo;fruitful&rdquo; ideas. When I do this, I am discounting my partner&rsquo;s suggestions and treating their ideas as worthless. If I do this too often, my partner may feel unheard and disrespected.</p>

<p>When: When my partner offers an idea that is entirely off the wall and will not possibly work. When I see myself discounting my partner, I try to stop myself, and mine for gold.</p>

<h2>Traveling Together</h2>

<p>What: Sometimes the path forward and the answer is clear to us, but not to our partner. It is tempting to &ldquo;get it done&rdquo; and drag our partner along.</p>

<p>Why: Leaving your partner behind creates a tension in the relationship. Perhaps you feel that the work needs to get done today and the team cannot afford to be slowed down by your partner. In this situation, the team is missing out on a great cross-training opportunity. We may be robbing our team of the most valuable services that we can provide.</p>

<p>When: If you sense that your partner is not comfortable with a decision, check in with them first. Avoid plowing forward.</p>

<p>How can two walk together, unless they agree to do so? [<a href="https://www.biblegateway.com/passage/?search=amos+3%3A3&amp;version=NKJV">reference</a>]</p>

<p>Example: One time I thought the next step was super easy. My partner was not understanding my suggestion. I said, &ldquo;let me try and see if it just works.&rdquo; Unfortunately, it turned out not to be so simple. After going down several layers, I realized that I needed to stop, start-over, and involve my partner in solving the problem.</p>

<p>As a rule of thumb, the pair should never move faster than its slowest member.</p>

<p>If the person is not contributing to the team, involve your manager. One member of the team does not decide who belongs on the team.</p>

<h2>Processing Strong Feelings</h2>

<p>What: I use a set of playing cards to help me or my partner process strong emotions.</p>

<p>Why: Some projects are stressful. Life happens; events outside work may affect our emotions. Research shows that the verbalization of feelings reduces the power of the feelings. The utilization of different parts of the brain helps the processing of feelings.</p>

<p>When:  If you observe in yourself or perceive in your partner, intense emotions that could affect the pairing dynamic, then consider this technique. Once I felt discombobulated and had difficulty in naming unfamiliar emotions, this exercise helped us understand what I was feeling.</p>

<p>&ldquo;A growing body of research has revealed that labeling an emotion, or putting one&rsquo;s feelings into words, can help to downregulate that affect&rdquo; [<a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4721564/">reference</a>]. &ldquo;The results indicated that affect labeling, relative to other forms of encoding, diminished the response of the amygdala and other limbic regions to negative emotional images. …. These results suggest that affect labeling may diminish emotional reactivity along a pathway from RVLPFC to MPFC to the amygdala.&rdquo; [<a href="https://pdfs.semanticscholar.org/5a46/0556d7278bd4f960a92d19b42c9347b35812.pdf">reference</a>].</p>

<p>How: Purchase a set of Mixed Emotion feeling cards available at <a target="_blank" href="https://www.amazon.com/gp/search/ref=as_li_qf_sp_sr_tl?ie=UTF8&tag=sedano-20&keywords=0970164017&index=aps&camp=1789&creative=9325&linkCode=ur2&linkId=0bdefc57e9d9437c06f6d2a26d5589a9">amazon.com</a> The cards are playful and helpful in getting in touch with emotions.</p>

<p><span class="thumbnail-image-block ssNonEditable"><span><a target="_blank" href="https://www.amazon.com/gp/search/ref=as_li_qf_sp_sr_tl?ie=UTF8&tag=sedano-20&keywords=0970164017&index=aps&camp=1789&creative=9325&linkCode=ur2&linkId=0bdefc57e9d9437c06f6d2a26d5589a9"><img src="http://professor.github.io/images/mixed-emotions.png" alt="Mixed Emotions Card Deck"/></a></span></span></p>

<p>Here is an example interaction: &ldquo;Are you willing to try an experiment with me? This exercise might help me identify some emotions that I am feeling. We each will look through a deck of cards and pull out one or two feeling cards with which we strongly identify. There are a lot of cards in this deck. Maybe you take the top half, and I will take the bottom half. Once we go through our decks, we then will switch. If we both want to select the same card, that is fine. There is just one in the deck though. Are you ok with this experiment?&rdquo;</p>

<p>Go about picking your cards. When you both are done, explain why you identified with each of your cards. For your partner&rsquo;s turn, try to make it as safe as possible. &ldquo;I would like to know why you are feeling each of those emotions, but only share to the depth that you feel comfortable.&rdquo; Some people will be eager to share their feelings and will even want to go first.</p>

<p>Example: One project had an aggressive deadline with a client who would refuse to prioritize the work to be done. The team suffered psychological distress [<a href="https://www.researchgate.net/publication/313360479_Software_Development_Waste">reference</a>]. Several times I used this exercise to discuss my feelings and de-stress. Once I was not sure what my emotions were; the 60 cards helped me identify what I was feeling. After doing this exercise, I felt more in touch with myself, more at ease, and more connected with my partner.</p>

<h2>Summary</h2>

<p>I have developed these strategies from working through bad pairing experiences. Many of these strategies attempt to be preventative maintenance, things we can do to avoid the issue entirely.</p>

<p>You might enjoy the <a href="http://sedano.org/book">book</a> I&rsquo;m working on. The book describes how Pivotal leverages pair programming and several other practices so that its teams can survive major disruptions.
<a href="http://sedano.org/book"><img border="0" src="http://professor.github.io/images/book2.png" alt="Brady Bunch View"/></a></p>

<p><sup>Collaborative Software Development &trade;</sup></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Considerate Pair Programming - Part 3]]></title>
    <link href="http://professor.github.io/toddsedano/2017/10/22/considerate-pair-programming.html"/>
    <updated>2017-10-22T08:37:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2017/10/22/considerate-pair-programming</id>
    <content type="html"><![CDATA[<h2>When Pair Programming Goes Wrong / Weird</h2>

<p>Since pairing is a relational practice relying on imperfect communication, misunderstandings and slights can emerge.</p>

<p>What could go wrong with pairing?  Here are some situations that have bothered me.</p>

<ul>
<li><p>You come across some code that is difficult to read. Your partner tells you not to refactor the code.</p></li>
<li><p>Your partner dominates the keyboard for most of the day.</p></li>
<li><p>Your partner does all the work without involving you.</p></li>
<li><p>Your partner tells you how horrible is the code that you helped work on the previous day.</p></li>
<li><p>You discuss a situation and agree to a plan, but then your partner starts doing his / her own thing anyway.</p></li>
</ul>


<p>In this section, I list out several strategies for coping with a situation that is getting tense, de-escalating a situation that is tense, and how to re-engage with your partner after a tense situation.</p>

<!-- more -->


<p>This is Part Three in a three part series covering strategies, techniques, and tips for Considerate Pair Programming.</p>

<p><a href="http://sedano.org/toddsedano/2017/10/24/considerate-pair-programming.html">Part One</a> covers <em>Why We Pair</em> and <em>Setting up the Work Environment</em> for success.</p>

<p><a href="http://sedano.org/toddsedano/2017/10/23/considerate-pair-programming.html">Part Two</a> covers <em>Strategies for Success</em> including</p>

<ul>
<li><p>welcoming interactions at different parts of the day,</p></li>
<li><p>reflecting on the pair programming experience, and</p></li>
<li><p>reframing interactions for growing collaboration.</p></li>
</ul>


<p><a href="http://sedano.org/toddsedano/2017/10/22/considerate-pair-programming.html">Part Three</a> covers what to do <em>When Things Go Weird</em></p>

<p>Remote pairing presents its own set of challenges. See <a href="http://sedano.org/toddsedano/2016/11/07/remote-pair-programming.html">my remote pairing blog post</a> for techniques to improve remote pairing effectiveness.</p>

<p>Choosing to pair program makes the fundamental assumption that each person in the pairing brings value.  Because technology changes so frequently, even someone new to a technology brings value because an expert programmer could not have seen everything. The “magic” of pairing is bringing together the disjoint experiences and knowledge. If one person is not fully engaged (either by choice or by exclusion) then the pair is not likely getting the value of the investment.</p>

<p><em>Taking a genuine interest in the other person</em> is a key take-away from this section. Sometimes this is easy. With some people we have an obvious overlap of personality, perspective, experience, or values. Sometimes this is hard. Your pair is not your enemy. We might need to make some conscious effort, e.g. focusing on the most respectable thing about that person and make many of your interactions with them about that.</p>

<p><em>Remember that our overarching goal is to to create a welcoming and safe environment for both pairs.</em></p>

<h2>Improving communication when things are starting to get tense</h2>

<p><strong>Repeat to understand</strong></p>

<p>What: Take a moment to make sure you understand your partner&rsquo;s idea. Repeat back or summarize what you just heard. &ldquo;I hear you saying that we should….&rdquo;</p>

<p>Why: This technique helps me understand if I am hearing what my pair is trying to say. I have experienced several cases where each of us thinks we are clearly communicating an idea, but one of us is fundamentally misunderstanding what the other is saying. People have different communication styles. Some prefer precise, detailed language while others prefer abstract communication. This technique can help bridge a communication gap when people of different communication styles pair.</p>

<p>When: Try this technique when you and your pair are not on the same page. If my partner says something that I think is utterly ridiculous, I might use this method to verify that I heard the suggestion correctly. In this situation, I do try to embrace empathy and not be sarcastic in repeating back what was said.</p>

<p><strong>Summarize current situation</strong> or <strong>review how we got here</strong></p>

<p>What: Describe where we are at or recall the journey.</p>

<p>Why: Sometimes it is easy to get caught up in arguing about the trees without seeing the forest. By reviewing our thought process on how we got here, we recall our decision-making process and refocus on our goals.</p>

<p>When: When the path forward is not obvious or we are no longer certain which problem we are solving.</p>

<p><strong>Advocate your partner&rsquo;s solution</strong></p>

<p>What: Articulate your partner&rsquo;s solution and describe what you like about it.</p>

<p>Why: This will showcase that there are merits in what your partner&rsquo;s solution. By taking your partner&rsquo;s point of view, you adopt a more flexible position and might let go ownership of your solution.</p>

<p>On several occasions, my partner and I have switched positions when I have used this technique. I want to do their idea, and they want to do my idea.</p>

<p><strong>Explore alternative solutions</strong></p>

<p>What: List out everything that could possibly work. Verbalize half-baked ideas.</p>

<p>Why: We want to find the best possible technical solution. Premature convergence happens when we latch onto an idea before we have explored many divergent ideas.</p>

<p>When: Sometimes we get bogged down on own perspective on how to solve an idea. By exploring alternative approaches, we unstick ourselves.</p>

<p><strong>Bring in the team</strong></p>

<p>What: Ask your team for their opinion. Try to present both ideas fairly. Experiment with each person advocating for the other person&rsquo;s idea.</p>

<p>Why: Involving multiple perspectives shifts the focus from &ldquo;you versus me.&rdquo; The team may bring additional insights and solutions. If two people cannot agree, it is probably worth taking the time for the team to help solve it.</p>

<p>If five people on a six-person team agree on a solution, there&rsquo;s more weight behind the team making the decision. For the dissenting point of view, mention that the team will try the solution and revisit the decision later if it does not work out. View this situation as a learning opportunity. On several occasions, I have thought something could not possibly work only to be pleasantly surprised that I was wrong.</p>

<p>When: After exploring alternative solutions, if the pair cannot agree on how to make forward progress. I tend to reach for this technique first when the decision affects everyone on the team.</p>

<p>One software engineer said, &ldquo;I have found bringing in the team works in principle for building consensus. I once had an issue where it left the dissenting developer feeling bitter, and resentful. He went behind everyone&rsquo;s backs to reverse the team design decision.&rdquo;</p>

<p><strong>Try one solution</strong> or <strong>try both solutions</strong></p>

<p>What: Trying one or both solutions.</p>

<p>Why: We can waste time in over-discussing solutions. Implementing a solution reveals new information. Sometimes we can quickly realize that a solution will need additional adaptations or simply will not work.</p>

<p>When: If it is easy to try one or both solutions and there is no clear winner.</p>

<h2>De-escalating a tense situation</h2>

<p><strong>&ldquo;I could really use a break.&rdquo; / Take a Break</strong></p>

<p>What: Suggest taking a break.</p>

<p>Why: If your pair pushed one of your buttons, you might need some time to decompress.</p>

<p>When: If you find yourself getting annoyed or your pair getting annoyed with you. If you see a pair on your team struggling with cooperation, suggest that the entire team take a break. &ldquo;Let us all play ping pong.&rdquo;</p>

<p>Example: In the Palo Alto office, it is super easy to get outside and enjoy nature. Sometimes I just need to sit in the sun, feel its warmth, and realize that this moment will pass. When my partner pushes one of my buttons, I might use an affirmation to ground myself: &ldquo;I add value to the team&rdquo; or &ldquo;I am wonderfully made&rdquo; or &ldquo;My opinions have merit.&rdquo; For me, the best affirmations are ones that I know to be true, but I am not feeling it to be true right now.</p>

<p><strong>&ldquo;Tell me about one of your passions.&rdquo;</strong></p>

<p>What: Get to know your partner in a different setting.</p>

<p>Why: Often we are so focused on delivering stories, that we do not take the time to know our pairs. Find a neutral topic on which you can relate. Reframe the situation to realize that you are pairing with a human, full of aspirations, goals, and needs. Connecting helps us see our partner as a person and grounds us in their humanity.</p>

<p>Example: When I taught at Carnegie Mellon University, two of my master students struggled with collaborating. One evening they had dinner and discovered that they loved the same sports team. Building connection points can shift the relationship from &ldquo;me versus them&rdquo; attitude.</p>

<p>By using this technique, I have learned how to brew coffee, how the bitcoin block-chain works, and my pair&rsquo;s dream to work at Space-X.</p>

<p><strong>Talk to a trusted friend</strong></p>

<p>What: Sometimes venting to a friend helps.</p>

<p>Why: I am biased by my own point of view and I can lose perspective. Talking to a friend helps separate my hang-ups from the dynamic with my pair.  Our friend may provide perspective that we are missing.</p>

<h2>How to re-engage</h2>

<p><strong>Bring it up. Acknowledge the situation.</strong></p>

<p>What: Have the courage to discuss the issue with your pair.</p>

<p>Why: Discussing an issue allows you both to work through it. Your pair might not be aware of the issue. Your pair might have been ok with the dynamic. Discussing it allows you both to resolve the problem.</p>

<p>When: Talk about it later when you and your pair are in a good space.</p>

<p>Example: &ldquo;Earlier today it seemed like you and I were not on the same page. For me, it felt awkward. Is there anything we could have done differently?&rdquo;</p>

<p><strong>&ldquo;When you… I make up … And I feel…&rdquo;</strong></p>

<p>What: In the first blank, you specify the observed behavior. In the second blank, you describe how you interpret the situation; since this is all in your head, you likely are projecting motive onto the other person. In the third blank, you describe how this makes you feel.</p>

<p>Why: This technique initiates the conversation about an observed behavior, but instead of blaming the other person, the technique focuses on how the behavior is affecting you. Talking about yourself, using “I” language, hopefully reduces the chance of putting the other person on the defensive. We are experts of our experiences.</p>

<p>Example: &ldquo;When you interrupt me before I have made my point, I make up in my head that you don&rsquo;t care about my point of view, and I feel disrespected.&rdquo;</p>

<p><strong>See the person&rsquo;s strengths</strong></p>

<p>What: List out the skills that your partner brings to the relationship.</p>

<p>Why: The pairing relationship is probably not all negative. Try to reframe the problem into an opportunity. How can we leverage each other&rsquo;s strengths? We each bring so much to the pairing relationship.</p>

<p>Example: I enjoy trying a solution and when it is not working moving onto another solution. One of my pairs loves going deep into solving any technical problem. He enjoys figuring out how everything works. I quickly get frustrated when things do not work. At first, this dynamic caused tension. When something was not working, he wanted to go deep into the bowels of the technology to solve it whereas I wanted to move onto a more promising idea. In time, I learned to see the benefit of combining our strengths. I learned to be more patient, trusting my partner&rsquo;s strength. We would explore a topic more than I was comfortable. Likewise, I could also serve my partner by suggesting it was time to try a new idea. I could pull the &ldquo;ripcord&rdquo; and abort an idea that was no longer promising. We successfully combined his strength of a &ldquo;deep dive&rdquo; with my strength of &ldquo;generalizing for the big picture.&rdquo; Once I saw how we complimented each other, I began to enjoy this aspect of our pairing dynamic and looked forward to pairing with him.</p>

<p>Example: On one project, I noticed that my pair was not listening to me and literally did all the typing. I felt discouraged and invaluable. (I call this dynamic &ldquo;Performance Pair Programming&rdquo; where one person performs coding for the audience of their pair.) One day while remote pairing, I was curious how long he would go on before noticing that I was not involved. I started to solo on my computer working on chores that needed to get done. Several hours past and my pair never noticed that I was disengaged. Later in the day, I mentally rejoined what he was working. As I was feeling guilty about what I had done, I acknowledged to my pair what happened and how I was not proud of my passive-aggressive behavior.</p>

<p>However, things did not get better. I still did not want to pair with him. Because of the large team size, I successfully navigated the pair rotation so that I did not pair with him for a couple of months. To help my attitude, I started praising to the team his contributions. By vocalizing his contributions, I eventually realized that this individual was incredibly smart. 99.5% of what he said was accurate, and he was often 5 steps ahead of everyone else in his thinking. I started paying attention to his perspective. When he disagreed with the team, I would want to know why. I became grateful that he was on our team. I made a special trip to his office to pair with him in person. Because my attitude had shifted so much, I had a fantastic time pairing with him that day and for the remainder of my time on that project.</p>

<p><strong>Antipattern &ndash; Ignore it. </strong></p>

<p>What: Pretend that it did not happen.</p>

<p>Why: This is a tempting technique because it seems the easiest. Sometimes things can resolve themselves. However, small issues tend to grow into large issues.</p>

<h2>Lacking Emotional Intelligence (EQ)</h2>

<p>If you are not aware of how your actions affect the mood of emotions of your partner, then I would recommend training. I have paired with some super smart people who were blind to how their actions caused me pain.</p>

<p>While I was pairing with someone with low emotional intelligence, he did all the typing and this made me grumpy. When I realized that my pair was unaffected by my mood, I discovered that I had to do less emotional work. If I was having a bad day, my pair was not bothered.</p>

<p>Amazon sells <a target="_blank" href="https://www.amazon.com/gp/product/1507750455/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1507750455&linkCode=as2&tag=sedano-20&linkId=6a2cd6fc2a6d4384bb53ba9330b90dfd">Enhancing Emotional Intelligence: Mindfulness-Based Strategies for Success &amp; Happiness</a><img src="http://professor.github.io//ir-na.amazon-adsystem.com/e/ir?t=sedano-20&l=am2&o=1&a=1507750455" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>Stanford University has a course called <a href="https://continuingstudies.stanford.edu/courses/professional-and-personal-development/enhancing-emotional-intelligence/20171_PDV-77">Enhancing Emotional Intelligence</a>.</p>

<h2>One Pair Teams</h2>

<p>Sometimes it is necessary for two people to pair for long periods of time. Perhaps there are only two developers on the team or there are two product designers collaborating together. In these &ldquo;pair marriages&rdquo; extra attention to these techniques is helpful.</p>

<p>One software engineer said, &ldquo;I have found it almost always leads to some tense periods throughout the project and makes everything this article says even more relevant. It is important for the pair going into a single pair project to know what they are getting into. It makes it easier to realize that things will be rough not because of you or your pair, but because being pair-married is inherently rough. However, I have also been rewarded with some great, lasting relationships from single pair projects.&rdquo;</p>

<h2>Summary</h2>

<p>By using these strategies, some of my most challenging pairing relationships transformed into my most delightful and treasured relationship. Deep pairing trust forms when I can work through hard conversations successfully. We learned how to utilize our mutual strengths compensate for our individual weaknesses.</p>

<p>If you have had a challenging experience, I would like to hear what it was like for you and how you went about solving it. Email me at <a href="&#x6d;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#x70;&#114;&#x6f;&#x66;&#101;&#115;&#x73;&#x6f;&#x72;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#109;">&#112;&#x72;&#x6f;&#102;&#x65;&#x73;&#115;&#x6f;&#x72;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a></p>

<p>You might enjoy the <a href="http://sedano.org/book">book</a> I&rsquo;m working on. The book describes how Pivotal leverages pair programming and several other practices so that its teams can survive major disruptions.
<a href="http://sedano.org/book"><img border="0" src="http://professor.github.io/images/book1.png" alt="Brady Bunch View"/></a></p>

<p><sup>Surviving Disruption with Sustainable Software Development &trade;</sup></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[software engineering grounded theory research]]></title>
    <link href="http://professor.github.io/toddsedano/2017/05/30/software-engineering-grounded-theory-research.html"/>
    <updated>2017-05-30T08:12:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2017/05/30/software-engineering-grounded-theory-research</id>
    <content type="html"><![CDATA[<p>If you are using Grounded Theory to conduct research in software engineering, I would love to hear from you. Please contact me at [professor at gmail.com]</p>

<p>If you are starting out on grounded theory research, I would suggest this plan of action:</p>

<ol>
<li>Determine with variant of Grounded Theory that you want to use. Options include:

<ul>
<li>Classic / Glasserian grounded theory</li>
<li>Straussian grounded theory</li>
<li>Constuctivist grounded theory</li>
</ul>
</li>
<li>Read <a href="https://www.researchgate.net/publication/287491381_Grounded_Theory_in_Software_Engineering_Research_A_Critical_Review_and_Guidelines">Stol&rsquo;s comparison</a> of the three major variants and recommendations on how to write grounded theory research.</li>
<li>Read my <a href="https://www.researchgate.net/publication/314081058_Lessons_Learned_from_an_Extended_Participant_Observation_Grounded_Theory_Study">lessons learned paper</a></li>
<li>Read a few exemplars (e.g. <a href="https://www.researchgate.net/publication/313360479_Software_Development_Waste">Software Development Waste</a>, <a href="https://rashinadotcom.files.wordpress.com/2011/06/hoda-becomingagile-icse2017-preprint.pdf">Becoming Agile</a>)</li>
<li>If you select Constructivist grounded theory, then read <a href="https://www.amazon.com/gp/product/0857029142/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0857029142&amp;linkCode=as2&amp;tag=sedano-20&amp;linkId=11734cd973c525d633fcfeeac3245f7b">Charmaz’s Constructing Grounded Theory</a></li>
<li>If you select Glasserian grounded theory, then read <a href="https://pdfs.semanticscholar.org/460c/9e0abe4ad1127da6410c912656ddda67510c.pdf">Hoda&rsquo;s Grounded Theory for Geeks</a> and read Glaser&rsquo;s books in order.</li>
</ol>


<p>This month I finished my Ph.D. I have used grounded theory for the last three years. I have found the method extremely rewarding. I loved interviewing, participant observation, and analyzing the data. There will be moments of confusion with the data. Embrace the confusion, on the other side tends to rewarding research results.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We Know The Way - Phonetic Lyrics - Moana]]></title>
    <link href="http://professor.github.io/toddsedano/2017/02/08/we-know-the-way-phonetic-lyrics-moana.html"/>
    <updated>2017-02-08T21:05:00-08:00</updated>
    <id>http://professor.github.io/toddsedano/2017/02/08/we-know-the-way-phonetic-lyrics-moana</id>
    <content type="html"><![CDATA[<p>We Know the Way &ndash; Phonetic Lyrics &ndash; Moana</p>

<p>Thank you Opetaia Foa&#8217;i for this fantastic song. It is my favorite
from the Moana sound track.</p>

<p>I wanted to learn this song, yet the official lyrics are in Samoan, Tokelauan, and English (I think). Since I only speak English, I created these phonetic lyrics.</p>

<p>I slowed the music to 70% normal speed and listened over and over again. Note, we might not have all the phonemes in English.</p>

<p>Ta-toe Ta-na-to-pho-low</p>

<p>Flah-ee-ow-ee-nah</p>

<p>Le&#8217;-tua-tsome knee-te-lay</p>

<p>A-ohm-my</p>

<p>Oo-ah-pah el-lay-lu-ah toa-le-eh</p>

<p>Ta-fi-na-fi-nigh</p>

<p>Oh-loh oh-loh tah-kah</p>

<p>Away Away</p>

<p>Ku-ku-en-new-ah</p>

<p>Te mah new lay lay A ta key A</p>

<p>Away Away</p>

<p>Tef-en-new-tim-mall-ee-A</p>

<p>Nah echo hockey lee-ah</p>

<p>Kah-ang nah-A</p>

<p>One of my hobbies is improv, and I play a game where we get our partner
to guess multi-syllabic words by acting out each phoneme.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote Pair Programming]]></title>
    <link href="http://professor.github.io/toddsedano/2016/11/07/remote-pair-programming.html"/>
    <updated>2016-11-07T08:37:00-08:00</updated>
    <id>http://professor.github.io/toddsedano/2016/11/07/remote-pair-programming</id>
    <content type="html"><![CDATA[<p><span class="thumbnail-image-block ssNonEditable"><span><img src="http://professor.github.io/images/remote_pair_programming.png" alt="Developer pair programming"/></span></span></p>

<p>While at Pivotal, I have iterated on remote pair programming while working on two distributed teams. This shares what I have learned about remote pairing.</p>

<h2>Best Practices</h2>

<ol>
<li><p>Periodically check in with your pair about the audio, video, and screen sharing quality. Fix issues promptly. If you are experiencing issues, bring them up. Quickly iterating is the key to improving the remote pairing experience.</p></li>
<li><p>Setup a video feed (zoom, appear.in, hangout, slack) that is always on and instant messaging (slack) in the secondary window. Much of communication is nonverbal. Seeing my partner excited or frustrated is super helpful.</p></li>
<li><p>Leave the video feed running during breaks. This allows each person to see what is happening at the other end. If my pair is in an office, I might see that my pair is talking to another member of the team.</p></li>
<li><p>In the office, leave the microphone open. This allows a remote person to feel connected to the office vibe when their pair is away from the desk. Osmatic communication can still happen.</p></li>
<li><p>When a team is distributed between two offices but pairing locally, setup a remote video feed. This allows either office to get the attention of the other office by waving frantically. (Often pairs do not check slack frequently while pairing.)</p></li>
<li><p>Use screenhero for screen sharing and zoom for video and audio. The audio in screenhero does not work as well as zoom or appear.in</p></li>
<li><p>Have all pairs join the same appear.in channel. Mute everyone but your pair. Whenever you need a team huddle, just enable everyone&rsquo;s channel. This reduces the friction for team huddles.</p></li>
</ol>


<p>Here the team is in one channel with multiple conversations. Note that the team has an extra camera setup to see what is happening in the aisle:
<span class="thumbnail-image-block ssNonEditable"><span><img src="http://professor.github.io/images/BradyBunch.jpg" alt="Brady Bunch View"/></span></span></p>

<ol>
<li><p>Ask for feedback about the development environment. While Pivotal uses <a href="https://github.com/pivotal/workstation-setup">workstation-setup</a> for consistent development environments, the screen resolution difference between a laptop and an iMac makes that combination super tricky. I prefer iMac to iMac.</p></li>
<li><p>If you are working across timezones, have empathy and be mindful of break times and lunch time.</p></li>
</ol>


<h2>Equipment</h2>

<ol>
<li><p>Use a two display system. One screen is shared. The other is for supporting remote pairing.</p></li>
<li><p>In the office, use an audio splitter. Have two headsets on the splitter. When another co-workes interrupts you, ask them to join the conversation. Having a second headset makes this easy. At the minimum, use a splitter to reduce friction.
I use <a target="_blank" href="https://www.amazon.com/gp/product/B001B19FDK/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B001B19FDK&linkCode=as2&tag=sedano-20&linkId=9c25b8c1f4b2016f14cf44493e4534c0">
Scotch 35 Electrical Tape</a> on <a target="_blank" href="https://www.amazon.com/gp/product/B00009WQSR/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B00009WQSR&linkCode=as2&tag=sedano-20&linkId=a3ffc4031a37c84f5b5fc2e011e4f92a">black Belkin Speaker and Headphone Splitter</a> <img src="http://professor.github.io/images/audio-splitters.jpg" alt="" width=75%/></p></li>
<li><p>In the office, use an expensive headset with a boom microphone.</p></li>
</ol>


<p>My personal favorite is the <a target="_blank" href="https://www.amazon.com/gp/product/B008O515CK/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B008O515CK&linkCode=as2&tag=sedano-20&linkId=78f3f782ad8a23da600b02fde69940c9">Sennheiser PC 363D Headset</a> (shown on the left).
<span class="thumbnail-image-block ssNonEditable"><span><a target="_blank" href="https://www.amazon.com/gp/product/B008O515CK/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B008O515CK&linkCode=as2&tag=sedano-20&linkId=78f3f782ad8a23da600b02fde69940c9">
<img src="http://professor.github.io/images/Sennheiser-PC-363D.jpg" alt="" style="height:350px"/></span></span></a><a target="_blank" href="https://www.amazon.com/gp/product/B015ZKJIYI/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B015ZKJIYI&linkCode=as2&tag=sedano-20&linkId=4dfc5dff322538bbbb30bb7d8c8c0478"><img src="http://professor.github.io/images/Sennheiser-PC-350-Special-2015.jpg" style="height:350px" /></a></p>

<p><img src="http://professor.github.io//ir-na.amazon-adsystem.com/e/ir?t=sedano-20&l=am2&o=1&a=B008O515CK" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
<img src="http://professor.github.io//ir-na.amazon-adsystem.com/e/ir?t=sedano-20&l=am2&o=1&a=B015ZKJIYI" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>In the office setting, avoid using earbud headsets as they tend to let in too much office noise. If you prefer these, check in with your pair about audio quality.
<span class="thumbnail-image-block ssNonEditable"><span><img src="http://professor.github.io/images/no_ear_buds.png" alt=""/></span></span></p>

<p>I updated this page on 10/3/2017 with the reasons behind the recommendations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Team Code Ownership]]></title>
    <link href="http://professor.github.io/toddsedano/2016/05/28/team-code-ownership.html"/>
    <updated>2016-05-28T10:54:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2016/05/28/team-code-ownership</id>
    <content type="html"><![CDATA[<p>Team Code Ownership is &ldquo;the ability for any developer on a team to change any of the team’s code.&rdquo;</p>

<p>I&rsquo;m presenting a paper on Team Code Ownership at EASE 2016 next week.</p>

<p>Read the paper on-line: <a href="https://goo.gl/vOeeMn">https://goo.gl/vOeeMn</a>
Or download the pdf: <a href="https://goo.gl/LXPg36">https://goo.gl/LXPg36</a></p>

<p>Summary of Paper</p>

<ul>
<li><p>My observations clearly indicate that team code ownership is a feeling that can be engendered, not a policy that the team adopts</p></li>
<li><p>Pivotal developers more acutely feel team code ownership when i) they understand the system context; ii) they have contributed to the code in question; iii) they perceive code quality as high; iv) they believe the product will satisfy user needs; and v) they perceive team cohesion as high.</p></li>
<li><p>The paper shows that diverse events and trends that can undermine sense of ownership</p></li>
<li><p>The paper replaces Beck&rsquo;s definition of Collective Code Ownership (&ldquo;anyone can change any piece of code in the system at any time&rdquo;) by introducing the new term Team Code Ownership (&ldquo;the ability for any developer on a team to change any of the team’s code&rdquo;)</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Theory of Sustainable Software Development through Team Code Ownership]]></title>
    <link href="http://professor.github.io/toddsedano/2016/04/14/theory-of-sustainable-software-development-through-team-code-ownership.html"/>
    <updated>2016-04-14T20:43:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2016/04/14/theory-of-sustainable-software-development-through-team-code-ownership</id>
    <content type="html"><![CDATA[<p>The theory describes how teams can continue to deliver value in spite of team disruptions. The theory is a collection of synergistic principles, policies, and practices encouraging a positive attitude towards team disruption, knowledge sharing and continuity, as well as caring about code quality. The Theory of Sustainable Software Development through Team Code Ownership is fully presented in the paper.</p>

<h2>Principles</h2>

<p>The theory underlying principles are as follows: <strong>Keep a Positive Attitude Toward Team Disruption</strong> by recognizing the value that new team members bring with their fresh perspectives and challenging team assumptions; <strong>Encourage Knowledge Sharing and Continuity</strong> by enabling the knowledge to spread from one developer to the next, eventually reaching the entire team; and <strong>Care about Code Quality</strong> by recognizing that a well cared for code base makes modifications easier.</p>

<h2>Policies</h2>

<p><strong>Team Code Ownership</strong> empowers engineers to modify any part of the system under the team’s responsibility. When engineers agree that a section of the system needs to be changed, the team proactively and tacitly authorizes the change. <strong>Shared Schedule</strong> aligns the team’s work schedule to enable efficient daily rotation of the developers working on a track of feature development. <strong>Avoid Technical Debt</strong> enables a team to balance feature development with Continuous Refactoring. When a team is pressured to finish work by a deadline, it might be tempted to focus on feature delivery, stop refactoring, and hence take on technical debt. The team should prefer consistent software development by caretaking the code and leaving the code base in a state where any member of the team can pick up the next story for that part of the code base. This requires product and management support to avoid unnecessary thrashing of developers rushing incomplete work by taking on technical debt to deliver a feature early.</p>

<h2>Removing Knowledge Silos Practices</h2>

<p>By sharing knowledge throughout a team, any pair will have enough context to understand what needs to be done and know who to ask if they need more details. <strong>Continuous Pair Programming</strong> reinforces that there is no single owner for any line of written code. The team owns the code. As two developers collaborate, they generate shared context. That knowledge will spread around the team the following day via <strong>Overlapping Pair Rotation</strong> which explicitly rotates people off a track of work in order to cross-pollinate knowledge and avoid emergent knowledge silos and individual ownership. <strong>Knowledge Pollination</strong> is activities that promote knowledge sharing in unstructured ways between pairs and includes activities such as daily stand-ups, writing on whiteboards, overhearing a conversation, calling out an update to the team, or simply reaching out to others to ask questions as needed.</p>

<h2>Caretaking the Code Practices</h2>

<p>By caretaking the code, the team enables any pair to be able to work on any story in the backlog.  <strong>Test Driven Development (TDD) / Behavior Driven Development (BDD)</strong> creates a safety net of tests that give any pair the courage to modify the system without the fear of breaking some other part of the system unexpectedly. The tests become a specification on how each component is used. <strong>Continuous Refactoring</strong> increases code quality by increasing code discoverability (knowing where to find the responsible code), increasing code readability, and increasing the simplicity of design.  <strong>Live on Master</strong> enables the team to perform Continuous Refactoring as the code is easy to integrate. When teams have long running development branches, merge conflicts discourage Continuous Refactoring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Performance pair programming]]></title>
    <link href="http://professor.github.io/toddsedano/2016/02/27/performance-pair-programming.html"/>
    <updated>2016-02-27T09:39:00-08:00</updated>
    <id>http://professor.github.io/toddsedano/2016/02/27/performance-pair-programming</id>
    <content type="html"><![CDATA[<p>Performance pair programming is when one developer drives the entire implementation while the other watches.
It is as if someone is solo programming with an audience. The performer prefers accomplishing a task more than
taking advantage of the teaching opportunity.</p>

<p>When this occurs, there is no collaboration or discussion about how to proceed. Questions that the watcher asks are often ignored.
Typically the Performer is unaware that their pair is not learning anything.</p>

<p>Since one of the most effective learning technique is &ldquo;learn by doing,&rdquo; the pair is missing a great learning opportunity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Origins of Collaborative Software Development]]></title>
    <link href="http://professor.github.io/toddsedano/2016/01/30/the-origins-of-collaborative-software-development.html"/>
    <updated>2016-01-30T15:31:00-08:00</updated>
    <id>http://professor.github.io/toddsedano/2016/01/30/the-origins-of-collaborative-software-development</id>
    <content type="html"><![CDATA[<p>Collaborative Software Development is the combination of practices from Extreme Programming, Kanban software development, User centered design, and Lean Start-up.</p>

<p>Kent Beck&rsquo;s Extreme Programming serves as the bedrock foundation for the practices at Pivotal. The company through Rob Mee experimented and piloted these ideas which formed the DNA for our software development practices. Over time these evolved. 1) The core technical practices remain the same. 2) Managing the backlog evolved from managing commitments for an iteration to just in time scheduling of work. By creating small stories, the need for story to task decomposition disappeared. Iteration planning meeting morphed into bi-directional communication about the immediate work to be done in order to create a shared context for the whole team. This removes unnecessary team task breakdown waste, mid-week checking in on programmers waste. It enables product to change the backlog whenever necessary by shifting stability from the iteration to the story. It enables developers to be present with the work and not focused into the future.  3) While Extreme Programming shifted the definition of features from engineers to product, XP did not specify how product determines these features (See below for more details.) XP enabled the developers to focus on the how and product to focus on the what.</p>

<p>When I first learned about Extreme Programming, it was described to me as &ldquo;cowboy programming&rdquo; and an excuse for developers to run amok with little discipline. I have been programming and teaching it since 2005 and can currently cannot imagine a saner way of developing software. I find it incredibly disciplined, applicable to many contexts, and I rely more heavily on it for challenging projects.</p>

<p>Collaborative Software Development&rsquo;s programming in the present comes from Kanban software&rsquo;s idea of no iterations. The team looks to design and product to periodically communicate and discuss the next bit of work to be done. Typically this happens weekly or more frequently. Since the team is not focused on a fixed amount of work for a period of time,
changes in priority do not necessarily interrupt team productivity. If design discovers a problem with a user interaction, a story to fix the issue can be added into the backlog and prioritized as the next most important thing to be done. Problems can arise if the team has no context on the work to be done, and performing an impromptu shared understanding meeting alleviates this problem. If too much trashing happens, the team needs to understand why there are daily fluxes in prioritization.</p>

<p>When I first heard about no iterations, I thought the idea was crazy. However, having experienced it myself, I appreciate the ability to show up at work and see what is the next important thing to get done.</p>

<p>Collaborative Software Development&rsquo;s validation of features by users comes from user-centered design and popularized by Lean Startup. The approach prioritizes the user&rsquo;s needs over perceived business desires and suggests that conflicts between the two should result in examining the business desires in order to align with what the consumer wants. This idea also comes from Lean Thinking which defines delivering only what the user wants as value and delivering anything that the user does not want as waste.</p>

<p>Lean Software Development is not a direct influence on Collaborative Software Development. Several of the ideas of lean thinking for reducing do show up. (Co-located teams, short feedback loops, anyone can stop software development by starting a team huddle.) Just as it is problematic to apply construction practices to software development, so to it is to apply manufacturing practices to software development. In Lean Thinking, most of the attention is on optimizing the production of identical components on an assembly line, not discussing how to optimize the design process of creating new products. While some software products are simply configured, at Pivotal, most it is rare for us to build the same component over and over again. Whenever that occurs, we design it once or refactor the code so that adding more is a trivial exercise. Since the work that we do is not repetitive like an assembly line, applying manufacturing technics to software development can be problematic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“Renaming the Iteration Planning Meeting"]]></title>
    <link href="http://professor.github.io/toddsedano/2015/08/08/renaming-the-iteration-planning-meeting.html"/>
    <updated>2015-08-08T14:32:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2015/08/08/renaming-the-iteration-planning-meeting</id>
    <content type="html"><![CDATA[<h1>Summary</h1>

<p>I suggest renaming the “Iteration” “Planning” Meeting (IPM) to accurately reflect Pivotal’s current goals and practices for that meeting.</p>

<h1>Context</h1>

<p>Over time, Pivotal has evolved its own form of Extreme Programming software development methodology by incorporating ideas from Lean Thinking from manufacturing and Lean Startup.</p>

<p>Some of our terminology needs refreshing to reflect the way we currently work. In particular, “Iteration Planning Meeting” does not accurately reflect what typically happens in that meeting.</p>

<p>In <a href="http://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/B00CF6EJG8">Extreme Programming</a> (1999) and <a href="http://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0321278658">Extreme Programming 2nd Edition</a> (2004) the development team commits to the stories to be accomplished during an iteration or weekly cycle just like a sprint in Scrum. The commitment can change as the week unfolds. Once Product identifies the stories for the week, programmers decompose the stories into tasks. After volunteering for a set of tasks, each programmer estimates only their tasks on Monday during an Iteration Planning Game (XP 1999) or Weekly Cycle meeting (XP 2004.)</p>

<p>In contrast, Pivotal follows a &ldquo;continuous flow&rdquo; where the work “flows” through people as people start the next needed story in the backlog. We limit work in progress to a story per pair of programmers. At Pivotal, we’ve customized the Extreme Programming process so that the developers accomplish the work that needs to get done at that moment in time. At any point in time, we can not predict who will be working on what work tomorrow, but we can say who is working on what work now. As that work is finished, we simply start the next unit of work to be done. We do not commit to which stories will be done in any given week, instead we follow a Lean Thinking’s just-in-time mechanisms for identifying what to work on next.</p>

<p>At Pivotal, stories and tasks are not owned by specific individuals. In Scrum and Extreme Programming, one person owns the task for the duration of the task. At Pivotal, many people might work on a single story. While the team notes who is working on each story right now, the team understands that these associations will change. After finishing a task, a development pair simply works on the next available story.</p>

<p>We’re familiar with the multi-day story: On Monday, Bailey and De begin working from the top of the backlog. On Tuesday, De and Kadeer continue on the story. On Wednesday, Kadeer and Lesley finish the story. For the participants, this can feel like a relay race. The entire team might even rotate through a complex story.</p>

<p>Pivotal prefers very small stories in order to deliver value quickly, remove engineering waste, shorten the feature feedback loop, and support iterative and incremental development. The smaller stories often do preclude the need to explicitly list out any tasks. It is rare for a pair of developers to need to list out the tasks associated with a story. Usually, the pair can effortlessly figure out what needs to get done.</p>

<p>We do not follow a Scrum Sprint, or an Extreme Programming Iteration or an Extreme Programming Weekly Cycle. We’ve successfully incorporated Lean into the way we prepare and execute our work.</p>

<h1>The concept of “week” describes the team’s work rhythm</h1>

<p>The team’s rhythm aligns with the natural rhythm of a work week. Retros are scheduled on Fridays at the end of the week. The meeting signifies closure for the week. There are practical reasons to schedule the meeting on a Friday. After a weekend off, the team forgets the details of the previous week. Just watch the Monday stand-up for confirmation as team members struggle to recall their stories from Friday.</p>

<p>The team schedules a “shared understanding” meeting once a week in order to 1) share context from product and design with the engineers. While the engineers are busy implementing stories, product and design are looking into the future work, specifying what needs to be done. This sharing of context helps anyone on the team pick up any story in the backlog. 2) The meeting provides feedback from enginering to product about the complexity and risk of the work. A story that seems simple to product might be expensive to impement. This emergent conversation allows product an opportunity to course correct to a simpler solution.</p>

<p>The meenting typically covers enough stories to make sure that we have enough work in the backlog. Teams typically schedule them on Mondays, Tuesdays, and Wednesdays since any day will do. (This is unlike an Extreme Programming Iteration where these need to be scheduled at the beginning of the week so developers know who is working on what.) If the backlog was extremely full, we could just cancel the meeting. Just because the team’s natural cadence aligns with the week does not mean we are doing Extreme Programming iterations.</p>

<p>The next time you find yourself using the word “iteration”, see if the word “weekly” would do instead. “What is our velocity this iteration?” becomes “What is our velocity this week?” and “How many iterations are left in this project?” becomes “How many weeks are left in this project?” The term iteration is a proxy for measuring time. Since we aren’t committing to work to be done in an iteration, our usage of the terms are interchangeable.</p>

<p>In communicating our process to potential clients and the outside world, I’d prefer to be accurate in describing our work flow as a Lean just-in-time system. Using the term “iteration” potentially miscommunicates that we are committing to specific work each week.</p>

<h1>Updating our terminology at Pivotal</h1>

<p>Since Pivotal has evolved its own form of Extreme Programming to incorporate Lean’s just-in-time practices, I suggest we use the accurate terminology in describing the way we work.</p>

<p>Consider our weekly meeting for creating shared mutual understanding and pointing the next stories in the backlog. Ironically, the meeting is called an “Iteration Planning Meeting” even though we do not commit to which stories we are doing next week and no explicit planning happens in the meeting. While we do point stories in the meeting, examining whether we are on track, re-prioritizing stories, and assigning work to individuals all happen outside the meeting. For us, planning happens at the product manager, client liaison, and client level as Pivotal discusses whether the project is on track and whether key features will be done by a certain date.</p>

<p>During our “Iteration” “Planning” Meeting, it is entirely possible that the stories we do discuss might happen two or even three weeks from now, not during the next “iteration.”</p>

<p>When I’m anchoring a project, my chief concern with our “Iteration” “Planning” Meeting is to make sure that our backlog has enough pointed stories for the next week. The team running out of work would be disastrous.</p>

<p>Finding a suitable replacement name for this meeting is challenging as many of us have different, sometimes conflicting expectations and goals for the meeting. Here is what I have found n interviewing 10 pivots and product managers from four offices.</p>

<p>Common goals for the meeting:
1) Create a shared understanding of the work that is to be done.  (Where are we headed? What will we be building? Are we building the right system?)
2) Communicate to the PM risks and story complexity. We typically use estimation as a forcing function to have this conversation.
3) Estimate the work
4) Verify that each story has clear acceptance criteria</p>

<p>Goals 1 and 2 are frequently cited in my interviews. Some pivots argue that we should not be pointing and thus goal 3 is not a goal for them in the meeting. Goal 4 is infrequently mentioned.</p>

<p>We could call the meeting a “Pointing Meeting” (PM) which unfortunately has the same abbreviation as Product Manager (PM). In discussing the goals of the meeting with numerous Product Managers, Anchors, and Pivots, I personally prefer the term “Shared Understanding Meeting” as it reinforces the goal of getting everyone on the same page.</p>

<h1>Updating Pivotal Tracker</h1>

<p>Pivotal Tracker might minor updates to its messaging. Pivotal Tracker describes each week as an “iteration” and has charts that talk about “iteration velocity” (aka weekly velocity) “iteration start date” (aka week start date). Fixing this would be a simple string replacement. Fortunately, many of the charts simply reference “Date” instead of “Iterations.” The terminology seeps more into the Help documentation than the tool itself. Keeping the iteration terminology in the help documentation makes sense given that other companies use tracker, and they might have sprints or iterations. Since the weekly markers are not labeled as iterations, one could use tracker for quite some time without knowing that the tool reinforced the Extreme Programming iteration concept from 1999.</p>

<h1>My own A-ha moment</h1>

<p>In the movie, the Matrix, Keanu Reaves follows a discovery and evaluation process to determine if he is “The One.” While in a waiting room, he sees a boy bending spoons and wonders how that is possible. The secret is that “there is no spoon.” I had a similar revelation while working on a Pivotal Labs project. In the middle of the work week, I was reflecting on our rhythm of weekly retrospections and weekly pointing meetings and realized that there were no iterations. We did not commit to explicit work each week. Every day felt very much like the next day. We weren’t ramping up on new stories on Monday to wind them down on Friday. Instead, we were present with the features in the backlog. We weren’t planning for or committing to which stories would be done in each week. I mentioned this to my pairing partner and he said, “Of course there are iterations, each Monday we start a new iteration!” The anchor overheard this conversation and said, “Actually, since our project started on a Tuesday, I setup Pivotal Tracker to have iterations go Tuesday to Monday.” With three developers on one team, we had widely different opinions of whether we had iterations and when they started. This conversation reinforced my observation that we were not using iterations as prescribed by Extreme Programming.</p>

<h1>Conclusion</h1>

<p>I recommend we replace “Iteration Planning Meeting” with a phrase that accurately describes the meeting’s purpose and goals. I suggest “Shared Understanding Meeting” as a simple draft proposal which is intended to encourage discussion about its disadvantages or the purpose of generating better proposals.</p>

<p>Update 5/10/2017: I now suggest &ldquo;Story Discussion Meeting&rdquo; or &ldquo;Story Estimation Meeting&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Collaborative Software Development]]></title>
    <link href="http://professor.github.io/toddsedano/2015/08/02/collaborative-software-development.html"/>
    <updated>2015-08-02T15:31:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2015/08/02/collaborative-software-development</id>
    <content type="html"><![CDATA[<p>I’m still editing this blog post and it is subject to change. While what I want to say isn’t changing, the words that I use to say it are changing.</p>

<h1>Collaborative Software Development</h1>

<p>Collaborative Software Development is an evolution of Extreme Programming method with iteration-less development. Collaborative Software Development starts with all of the practices of Extreme Programming (XP) and replaces the concept of iterations with Lean Thinking’s just-in-time production philosophy manifested in pulled-based practices. This achieves a high quality, extremely readable, and well designed software with a faster ability to respond to change.</p>

<p>Collaborative Software Development continues to rely on all the technical practices of XP including pair-programming, test-driven development as well as the remaining process practices of XP including on-site customer.</p>

<h1>Commitment level shifts from the iteration to story</h1>

<p>While there is a commitment to the story in-flight, the developers with the product manager may realize that the story needs changing. While working on a story, the developers might discover a corner case not considered by the product manager, or find a confusing user interaction flow that requires the user experience to be re-worked. For these emergent and “internal” changes, the story needs updating. (reduces the waste from more design-up-front approaches. This is an advantage of the process.) For “external” changes where the product owner changes the feature, typically the product owner creates a new story that reflects the new insight into the feature. From this perspective, there is a commitment between the product owner and the team that the stories written reflect our current understanding of the system and will not be re-written by product.</p>

<p>By switching from an iteration based to a just-in-time workflow, the commitment level changes from the iteration to the story.  In Extreme Programming, there is a weekly contract between the product owner and the development team that the work for a particular week is fixed. Anything can change about the project, as long as the changes occurred between iterations. With Collaborative Software Development, the product owner is committing to the completion of any story in flight since it was at the top of the backlog when available developers pick it up and start working on it. In practice, product owners do not cancel in-flight stories. Stories might become blocked and be un-started. Theoretically it is possible that the direction of a project changes so drastically that you might stop working on a story, but in practice this is extremely rare.</p>

<h1>Being in the moment</h1>

<p>In this environment, developers learn to be flexible when showing up at work, just like actors performing improvisation without a script. Imagine a developer with expectations about their work for the day. At the beginning of the day, they pair up, and the pair may discover that the team’s needs will cause the developer’s expectations to be misaligned from reality. Developers learn to loosely hold any expectations and embrace what emerges in the day. Developers can be pleasantly surprised by what emerges. “Acceptance is the answer” to many of life’s problems. A developer can express their desires to the team. Examples include “I haven’t worked on this part of the code base recently” or “I haven’t paired with this person in awhile” or “I really enjoy working on UI stories.” However, if the build is broken, or the product manager needs help in accepting a story, then the reality of the moment will trump any of the developer’s plans.</p>

<p>Improvisors practice letting go of planning through exercises that reinforce handling of chaotic situations, rewarding spontaneity, and listening. In Lean XP, we learn to listen to our pairs, our tests, our code, our stories, our product owner, and our users.</p>

<p>“You Aren’t Going to Need It” (YAGNI) encapsulates part of this idea. Instead of worrying about future features, let’s focus on the current system and implementing the current feature. At its heart, its about being in the present with the code. By not committing to stories for each week, it shifts the conversation. Instead of discussing what was done last week, or what will be done next week, the team can focus on what needs to be done now.</p>

<h1>Pros</h1>

<p><strong>This approach encourages flexibility in the developers.</strong> I don’t know what I’m working on today. If I do have plans, I need to be willing to let go.</p>

<p><strong>This approach allows for quick re-distribution of the work.</strong> As developers finish a story, they will pick up the next important one. The PM can re-prioritize the backlog at any point and know that the most important story will be worked on as soon as a pair finishes their current work.</p>

<p>If everyone was committed to a task within a sprint, then explicitly coordination is required to determine which tasks should be postponed and dropped. Dependencies on those tasks could also be affected.</p>

<p><strong>This simplifies the plan of work for the week</strong> Some engineering managers maintain intricate mappings of who is working on what and who is dependent upon what. If any one developer slips on their work, there is other work that is also delayed. Lean XP shifts the focus from developer dependency to story dependency. Stories that block other stories can be explicitly labeled. When the first story finishes, the second story can be unblocked and worked upon when it reaches the top of its backlog. There is no “chess” game of resource allocation and dependency management.</p>

<p>How is a SE kanban board lean? Instead of tracking about all of the requirements of a product, we can just track the stories in the next iteration or the features in the next release?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X filesystem and case sensitive bugs]]></title>
    <link href="http://professor.github.io/toddsedano/2015/05/13/os-x-filesystem-and-case-sensitive-bugs.html"/>
    <updated>2015-05-13T20:16:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2015/05/13/os-x-filesystem-and-case-sensitive-bugs</id>
    <content type="html"><![CDATA[<h3>Problem:</h3>

<p>On one project, our test cases would be green locally, but then fail on CI due to filesystem case sensitivity differences between OS X (our development environment) and linux (our QA and production environments.). By default, OS X treats ~/project/myFile as equals to ~/projectMyFile. Thus if the code had a typo on an import, it might pass locally when it shouldn&rsquo;t.</p>

<h3>Solution:</h3>

<p>I wanted to use the base pivotal OS X image and sprout wrap. The strategy is to create a case sensitive partition and symlink the workspace directory to it. Sprout wrap has issues with case sensitivity (pivotal_ide_prefs in particular), so we would run that from the user&rsquo;s home directory, but run all project materials in the case sensitive directory.</p>

<p>Alternative solution: getting the pivotal OS X image on a USB key might allow us to configure the default partition&rsquo;s setting on installation.</p>

<p>These steps could work with an existing machine, but I only tested on a clean install</p>

<p>Step 1) install the Pivotal Labs OS X image</p>

<p>Step 2) using Disk Utility, split the only partition in half. For the new partition select &ldquo;Mac OS Extended (Case-sensitive, Journaled)&rdquo;</p>

<p><span class="thumbnail-image-block ssNonEditable"><span><img src="http://professor.github.io/images/screen_shot_partition.png" alt=""/></span></span></p>

<p>Step 3) create a workspace directory in the new partition
mkdir /Volumes/CASE_SENSITIVE/workspace</p>

<p>Step 4) symlink ~pivotal/workspace to the new partition&rsquo;s workspace directory.
ln -s /Volumes/CASE_SENSITIVE/workspace /Users/pivotal/workspace</p>

<p>Step 5) install sprout-wrap from ~, NOT from ~/workspace. I noticed that the pivotal_ide_prefs wouldn&rsquo;t fully work with case sensitive on. (There may be other recipes that have issues too.)</p>

<p>Step 6) install your project code in ~/workspace</p>

<p>Note that everything in Applications et al.  will be typical Mac Setup, but we were fine with that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Estimated vs actual story points]]></title>
    <link href="http://professor.github.io/toddsedano/2015/05/11/estimated-vs-actual-story-points.html"/>
    <updated>2015-05-11T21:14:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2015/05/11/estimated-vs-actual-story-points</id>
    <content type="html"><![CDATA[<p>On my last project, I tried an experiment looking at estimation accuracy.</p>

<p>My results run counter the conventional wisdom of software engineering research and experience, but are consistent with my experience at Pivotal. Conventional wisdom says that engineers are optimistic and horrible at estimating work which is why some managers &ldquo;double&rdquo; estimates given to them.</p>

<p>On my last team, we tended to be cautious in estimating work and not overly optimistic about the risk and complexity of our work. This is similar to the &ldquo;under commit, over deliver&rdquo; adage.</p>

<p>Here is how we went about collecting the data
1) We limited our pointing scale to &ldquo;Easy&rdquo;, &ldquo;Medium&rdquo; and &ldquo;Hard&rdquo; &mdash; one of the pivots advocated this scale and I liked the simplicity of it. We mapped &ldquo;Easy&rdquo; to 1 story point, &ldquo;Medium&rdquo; to 3 story points and &ldquo;Hard&rdquo; to 8 story points. In the meeting we would hold up 1, 2, or 3 fingers, I would call out Easy/Medium/Hard and the PM would record the correct story points.</p>

<p>While I don&rsquo;t have evidence for this, I felt that the IPMs were very efficient as there was less quibbling over minor point differences. We went with the majority point value. If a large number of people said Easy and a large number of people said Medium, we&rsquo;d have a discussion. If most of the team said Easy and a few number of people said Hard, we&rsquo;d have a discussion.</p>

<p>2) At the end of each story, the pair would assign a Pivotal Tracker label to reflect the actual point value. We used the labels &ldquo;Actual Easy Points&rdquo; &ldquo;Actual Medium Points&rdquo; &ldquo;Actual Hard Points&rdquo;, eventually we had to add a &ldquo;Actual Zero Points&rdquo;. I asked the pair not to look at the estimate on the story while recording the actual, but there could be some anchoring bias with the data.</p>

<p>3) I monitored tracker and reminded developers to put labels on stories they had finished but had not labeled.</p>

<p>Periodically, I would show results to the team. (After 1 month, 2 months, and end of project.)</p>

<table>
    <tr><td>&nbsp</td>
        <td>We were&#8230; (number of stories)</td></tr>
    <tr><td>Estimate</td>
        <td>Conservative</td>
        <td>Accurate</td>
        <td>Optimistic</td>
    </tr>
    <tr><td>0</td>
        <td></td>
        <td>5</td>
        <td>1</td>
    </tr>
    <tr><td>1</td>
        <td>7</td>
        <td>48</td>
        <td>5</td>
    </tr>
    <tr><td>3</td>
        <td>13</td>
        <td>14</td>
        <td>2</td>
    </tr>
    <tr><td>8</td>
        <td>0</td>
        <td>2</td>
        <td></td>
    </tr>
    <tr><td>Estimate</td>
        <td>Conservative</td>
        <td>Accurate</td>
        <td>Optimistic</td>
    </tr>
    <tr><td>0</td>
        <td></td>
        <td>83.33%</td>
        <td>16.67%</td>
    </tr>
    <tr><td>1</td>
        <td>11.48%</td>
        <td>48.28%</td>
        <td>6.90%</td>
    </tr>
    <tr><td>3</td>
        <td>44.83%</td>
        <td>48.28%</td>
        <td>6.90%</td>
    </tr>
    <tr><td>8</td>
        <td>0.00%</td>
        <td>100.00%</td>
        <td>0.00%</td>
    </tr>
</table>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SE Marathon Quote]]></title>
    <link href="http://professor.github.io/toddsedano/2015/03/08/software-development-is-a-marathon-not-a-sprint.html"/>
    <updated>2015-03-08T09:46:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2015/03/08/software-development-is-a-marathon-not-a-sprint</id>
    <content type="html"><![CDATA[<p>Software Development is a marathon, not a sprint</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Frustration Quote]]></title>
    <link href="http://professor.github.io/toddsedano/2013/07/11/frustration-quote.html"/>
    <updated>2013-07-11T14:22:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2013/07/11/frustration-quote</id>
    <content type="html"><![CDATA[<p>I am frustrated when my expectations do not align with reality &ndash; Todd Sedano</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rethinking SEMAT card affordance]]></title>
    <link href="http://professor.github.io/toddsedano/2013/05/22/rethinking-semat-card-affordance.html"/>
    <updated>2013-05-22T01:19:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2013/05/22/rethinking-semat-card-affordance</id>
    <content type="html"><![CDATA[<h3>A possible solution</h3>

<p>While I&rsquo;m an avid player of card games and board games, the SEMAT card format does not reflect how I think about the alphas, which are a collection of states.</p>

<p>Here is a mock prototype of an alternative physical format for the SEMAT alphas.</p>

<p><span class="thumbnail-image-block ssNonEditable"><span><img src="http://professor.github.io/images/semat_strip_thumbnail.jpg" alt=""/></span></span></p>

<p>Each alpha is a strip of cards folded much like a scroll with the &ldquo;highest&rdquo; state on the inside, and the lowest state on the outside. Starting with the &ldquo;lowest&rdquo; state, the user of SEMAT, can incrementally unfold the strip comparing the current state with the next possible state. If the next possible state is achieved, then the user can continue to unroll the strip.</p>

<p><span class="thumbnail-image-block ssNonEditable"><span><img src="http://professor.github.io/images/semat_current_next_thumbnail.jpg" height=116 alt=""/></span></span></p>

<p>Now it is impossible to accidentally loose a state in the alpha, and displaying the current state for all alphas in a project takes up roughly 1/6 of the room of the SEMAT board.</p>

<p>So what do we call these new SEMAT cards? SEMAT strips, SEMAT rolls, SEMAT scrolls? I&rsquo;m open to suggestions.</p>

<h3>Background &mdash; the problem</h3>

<p>When I first saw a set of SEMAT cards, my instinct told me something wasn&rsquo;t quite right. I collect playing cards. I like unusual cards sets such as my agile estimation cards, XP training cards, improv feeling cards.</p>

<p>When I laid out six cards for an alpha, it felt messy. I could easily get these out of order, and the order matters in a single alpha. If I piled up several alphas without a rubber band, I could easily mix them together.</p>

<p>I pictured myself introducing this at a training session. With agile estimation cards, I just hand out a deck, yet for SEMAT I would want to hand one alpha at a time. If SEMAT cards were printed in a deck, taking out one alpha at a time would be time consuming.</p>

<p>I do think agile estimation cards work well. There are four sets in one deck, just like regular playing cards. Assuming that my five year old daughter found the deck and randomized it, sorting it wouldn&rsquo;t take too long with four sets. However SEMAT cards, there are many alphas, and sorting it would be tedious.</p>

<h3>Abacus as an alternative metaphor</h3>

<p>I stared considering an abacus. Each rod of the abacus could represent an alpha. Each bead on a rod could represent a state card. The space between the beads on the left and the beads on the right could represent the current state. Yet creating an abacus for SEMAT seemed unfeasible. Then it occurred to me, I could tape the SEMAT cards into a strip.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improving code readability -- turning comments into methods]]></title>
    <link href="http://professor.github.io/toddsedano/2013/02/19/improving-code-readability-turning-comments-into-methods.html"/>
    <updated>2013-02-19T21:49:00-08:00</updated>
    <id>http://professor.github.io/toddsedano/2013/02/19/improving-code-readability-turning-comments-into-methods</id>
    <content type="html"><![CDATA[<p>I&rsquo;m working with 21 developers to improve their code readability. Through a code read-through, they listen to another developer try and read their code. (See <a href="" title="http://sedano.org/journal/2011/3/30/code-readability-process.html">Code Readability Process</a> for more details.)</p>

<p>In reviewing one programmer&rsquo;s code, a sixty line method had a visual rhythm to it. There would be a blank space, a comment, then about ten lines of code, and the cycle would repeat. The comment would explained the code just following it.</p>

<p>The programmer realizes that the narrative is lost in their code, and feels compelled to add these comments to help the reader understand what is going on. These comments serve as section breaks or chapter headings.</p>

<p>Instead, the code could be split up into smaller methods, where each method name would clearly revel the intent of the code. The comment would be better served as a method invocation.</p>

<p>Here&rsquo;s the pattern</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//determine interest rate  (comment about the code intention)
</span><span class='line'>code
</span><span class='line'>code
</span><span class='line'>code</span></code></pre></td></tr></table></div></figure>


<p>Becomes</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>determine_interest_rate()</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the original code</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="n">bool</span> <span class="ss">Tictactoe</span><span class="p">:</span><span class="ss">:determine_game</span><span class="p">(</span><span class="n">int</span> <span class="n">row</span><span class="p">,</span> <span class="n">int</span> <span class="n">column</span><span class="p">,</span> <span class="n">char</span> <span class="n">move</span><span class="p">){</span>
</span><span class='line'>        <span class="n">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>        <span class="n">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="sr">//</span> <span class="no">Check</span> <span class="n">the</span> <span class="n">row</span> <span class="n">of</span> <span class="n">latest</span> <span class="n">play</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">flag</span><span class="p">){</span>
</span><span class='line'>           <span class="n">flag</span> <span class="o">=</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>           <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>           <span class="k">while</span><span class="p">((</span><span class="n">i</span><span class="o">&lt;</span><span class="n">dimension</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">flag</span><span class="o">==</span><span class="kp">true</span><span class="p">)){</span>
</span><span class='line'>               <span class="k">if</span><span class="p">(</span><span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">move</span><span class="p">){</span>
</span><span class='line'>                   <span class="n">flag</span> <span class="o">=</span> <span class="kp">false</span><span class="p">;</span>
</span><span class='line'>               <span class="p">}</span>
</span><span class='line'>               <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>           <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="sr">//</span> <span class="no">Check</span> <span class="n">the</span> <span class="n">column</span> <span class="n">of</span> <span class="n">latest</span> <span class="n">play</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">flag</span><span class="p">){</span>
</span><span class='line'>            <span class="n">flag</span> <span class="o">=</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>            <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">while</span><span class="p">((</span><span class="n">i</span><span class="o">&lt;</span><span class="n">dimension</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">flag</span><span class="o">==</span><span class="kp">true</span><span class="p">)){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">column</span><span class="o">]</span> <span class="o">!=</span> <span class="n">move</span><span class="p">){</span>
</span><span class='line'>                    <span class="n">flag</span> <span class="o">=</span> <span class="kp">false</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">flag</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the revised code.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>     <span class="n">bool</span> <span class="ss">Tictactoe</span><span class="p">:</span><span class="ss">:determine_game</span><span class="p">(</span><span class="n">int</span> <span class="n">row</span><span class="p">,</span> <span class="n">int</span> <span class="n">column</span><span class="p">,</span> <span class="n">char</span> <span class="n">move</span><span class="p">){</span>
</span><span class='line'>        <span class="n">bool</span> <span class="n">winner_found</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">winner_found</span> <span class="o">=</span> <span class="n">check_row_of_latest_play</span><span class="p">(</span><span class="n">row</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>                       <span class="n">check_column_of_latest_play</span><span class="p">(</span><span class="n">column</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>                       <span class="n">check_</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">winner_found</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>(Note that I have not shown other refactoring that I would do, as it would distract from the point.)</p>

<p>By changing the comment to a method call, the code is now more &ldquo;self documenting&rdquo; and the intent is clear by the method call.</p>

<p>When I suggested this to the programmer, she resisted the idea noting that a method call would affect performance. For a tic-tac-toe problem, this is a specious argument. However, is there merit to it? Will a modern compiler optimize this kind of refactoring? And this brings up a broader question, should we optimize code for performance or readability when we are writing it? Conventional wisdom says we should write code that is clean and easy to understand, and when we are done and have performance analysis with production data, then we know where to spend engineering effort to optimize critical sections. The one exception would be algorithm complexity and running times. (e.g. O(N) vs O(NxN)</p>

<p>I&rsquo;m now curious, is this a &ldquo;comment smell&rdquo;? Can comments be indicators to us programmers that the code we just wrote isn&rsquo;t very clear. The comment itself my inform us on how we need to refactor the code to make it more readable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improv game for software engineers: Program Counter]]></title>
    <link href="http://professor.github.io/toddsedano/2012/07/27/improv-game-for-software-engineers-program-counter.html"/>
    <updated>2012-07-27T14:06:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2012/07/27/improv-game-for-software-engineers-program-counter</id>
    <content type="html"><![CDATA[<p>I invited this improv game themed around software development for some Brazilian computer science students visiting my campus. It&rsquo;s a variant of the many reaction based, warm-up games (e.g. &ldquo;Whoosh Ball&rdquo;) that encourage quick response time and discourages over-thinking or planning a response. I like playing it with software developers because it makes more sense to them than these other games.</p>

<h3>Instructions</h3>

<p>Have the group form a circle.</p>

<p>Explain that we are going to mimic a program counter moving around the circle. Each person gets to say the instruction that the program counter is going to do. The instructions are <strong>&ldquo;Op&rdquo;</strong>, <strong>&ldquo;Loop N&rdquo;</strong>, <strong>&ldquo;Method Call&rdquo;</strong>, <strong>&ldquo;If true&rdquo;</strong>, <strong>&ldquo;If false&rdquo;</strong></p>

<p><strong>&ldquo;Op&rdquo;</strong> &mdash; There are a variety of operations that a normal CPU would do, such as add, subtract, store to a register. For this game, we&rsquo;ll simplify all of these possible operations into a single command &ldquo;op&rdquo; &mdash; have the entire circle practice that command going around. Pretty simple. Let&rsquo;s make it more interesting.</p>

<p><strong>&ldquo;Loop N&rdquo;</strong> &mdash; A basic control flow of most programming languages is the ability to go through a loop and do multiple instructions each time. If someone says &ldquo;loop 3&rdquo; this indicates that we are iterating over a collection with three elements. The next person says &ldquo;one&rdquo; indicating that the first set of instructions is now happening. The next person says &ldquo;two&rdquo;. The next person says &ldquo;three&rdquo;. Then we proceed as normal. (I&rsquo;ve seen one group say &ldquo;Loop Zero&rdquo; which we treated as a finished loop. It&rsquo;s just like saying &ldquo;Op&rdquo;) We do this for awhile until people get it.</p>

<p><strong>&ldquo;Method Call&rdquo;</strong> and point to someone or say their name out loud &mdash; Often programs re-use code by calling a method on that section of the code. If someone says method call and points to someone we are jumping to that section of the code. (That person needs to decide which way the program counter will continue.)  We keep executing instructions until someone says <strong>&ldquo;return&rdquo;</strong> at which point the program counter goes back to the person who said &ldquo;method call&rdquo; (Sometimes people will think that it returns to the person who was pointed at, but it returns to the person who started the method call, just like a real program.) Yes, method calls can be nested multiple times and even have recursion.</p>

<p>I personally like this operation. In many improv games, the equivalent operation is often a chance for the person to pass control to someone else without cost. E.g. I panic, I don&rsquo;t want this thing, I think it&rsquo;s a &ldquo;hot potato&rdquo; so I&rsquo;m going to give it to you quickly by saying &ldquo;Zoom&rdquo; so that I don&rsquo;t have to deal with it. However, in this game, there is a cost of saying &ldquo;Method Call&rdquo; for the person, they have to remember that they said it. Everyone else in the room, just really needs to track the depth or number of method calls that have been said, where as the people who say method call need to remember where they are on the stack.</p>

<p><strong>&ldquo;If true&rdquo;</strong> and <strong>&ldquo;if false&rdquo;</strong> &mdash; eventually we get tired of going around in the same direction &mdash; Our program counter is pretty simple and can&rsquo;t deal with branch predictions so whenever we use the IF statement, we pay a performance penalty and skip the next step, e.g. the next person. &ldquo;If true&rdquo; then will skip the next person. &ldquo;If false&rdquo; then reverses the direction and skips the next person. (Here&rsquo;s an example, if we moving clockwise and you say &ldquo;if true&rdquo;, we skip the person to the left. If you say &ldquo;if false&rdquo;, it skips the person to the right and proceed clockwise.)</p>

<p><strong>&ldquo;Cheer&rdquo;</strong> &mdash; As soon as the first mistake happens, agree upon a verbal saying that symbolizes, &ldquo;We are having fun, we made a mistake, and we get to restart!&rdquo; In my improv training that&rsquo;s been &ldquo;Ah-ooo-ga&rdquo;, the Brazilian students preferred &ldquo;Ciao!&rdquo; and I&rsquo;ve seen other positive vocalizations.</p>

<h3>Other considerations</h3>

<p>After introducing these instructions, I allow the group to invite any programming constructs that they can think of, and I say &ldquo;yes&rdquo; to any suggestion no how bizarre it is. Sometimes I&rsquo;ll allow the group to tweak it if it isn&rsquo;t clear. If you try something let me know.</p>

<p>One variant of &ldquo;<strong>op</strong>&rdquo; is to allow them to create any normal single instruction operation. They could say &ldquo;add&rdquo;, &ldquo;store&rdquo;, &ldquo;multiply&rdquo; instead of &ldquo;op&rdquo; &mdash; I suspect that doing this might be best at the beginning, but I have not tried that experiment.</p>

<p>Feel free to use this game. I&rsquo;m assuming that no-one will ever remember that I invited it. =)</p>

<h3>Game History</h3>

<p>On February 20, 2012, a student group from <a href="http://www.uniasselvi.com.br">Uniasselvi University</a>
in Brazil visited Carnegie Mellon University in Silicon Valley. Since I don&rsquo;t know Portuguese, Professor Jan Charles Gross graciously translated my instructions.</p>

<p><span class="full-image-block ssNonEditable"><span><img src="http://professor.github.io/images/ToddSedano%20with%20JanCharlesGross.png" alt=""/></span></span></p>

<p>Professor Gross&#8217; son, Professor Sedano, Chris Zeise, Professor Gross</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD: small Ah-Ha moment on when to use a hash instead of an array]]></title>
    <link href="http://professor.github.io/toddsedano/2012/07/20/tdd-small-ah-ha-moment-on-when-to-use-a-hash-instead-of-an-array.html"/>
    <updated>2012-07-20T13:34:00-07:00</updated>
    <id>http://professor.github.io/toddsedano/2012/07/20/tdd-small-ah-ha-moment-on-when-to-use-a-hash-instead-of-an-array</id>
    <content type="html"><![CDATA[<p>I&rsquo;m sharing a pleasant surprise I had during a recent Test Driven Development coding session. My tests had found a design that was delightful to me. TDD suggested that I use a hash where my natural tendency is to use an array.</p>

<p>For the purpose of clarity, I&rsquo;m simplifying a very complicated data structure for this example. Let&rsquo;s say we wanted to show the user the most popular cheat codes for a set of video games. For the sake of the example, let&rsquo;s assume that this information is stored in the database in a way that is rather difficult to access. Thus the need for a method &ldquo;most_popular_cheats&rdquo; to do the heavy lifting.</p>

<p>Let&rsquo;s recall some popular cheat codes. Contra&rsquo;s cheat code is &ldquo;UP, UP, DOWN, DOWN, LEFT, RIGHT, LEFT, RIGHT, B, A, START&rdquo;  and Mike Tyson&rsquo;s cheat code is &ldquo;007-373-5963&rdquo;</p>

<p>From the control flow, I would already know the order of the video games that needed cheat codes, and expected that the method &ldquo;most_popular_cheats&rdquo; would just return an array.</p>

<p>However, as I wrote the test first, I realized that the test wouldn&rsquo;t know the exact order of the video games. After I created some test data in the database, I wasn&rsquo;t certain how they would be retrieved, would the default sorting be by ID, or by name? The test didn&rsquo;t know and I didn&rsquo;t think the test should care. If the method returned a hash, I could just see if the hash contained the key->value pairs that I expected.</p>

<pre><code>Hash: {contra.id =&gt; "UP, UP….", mike_tyson.id =&gt; "007-373-6963"}
</code></pre>

<p>On previous projects, following the traditional &ldquo;code then test&rdquo; development style, I have generated two parallel arrays to solve this problem kind of problem. One that contained the answer (what is my value in my hash), and the other that contained the index (what is my key in my hash.) On those projects, it had not occurred to me that a hash was a better data structure. My tests informed me on a programming nuance that I had previously missed.</p>

<p>Here&rsquo;s the simplified version of test case that lead me to this small ah-ha moment.</p>

<pre><code>contra = FactoryGirl.create(:video_game_with_popular_cheats)
mike_tyson = FactoryGirl.create(:video_game_with_popular_cheats)

popular_game_cheats = Game.most_popular_cheats
popular_game_cheats = should be_a_kind_of(Hash)
popular_game_cheats[contra.id].should = "UP, UP, DOWN, DOWN, LEFT, RIGHT, LEFT, RIGHT, B, A, START"
popular_game_cheats[mike_tyson.id].should = "007-373-5963"
</code></pre>
]]></content>
  </entry>
  
</feed>
