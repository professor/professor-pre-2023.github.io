<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Todd Sedano]]></title>
  <link href="http://professor.github.io/atom.xml" rel="self"/>
  <link href="http://professor.github.io/"/>
  <updated>2013-07-25T10:08:31-07:00</updated>
  <id>http://professor.github.io/</id>
  <author>
    <name><![CDATA[Todd Sedano]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Frustration Quote]]></title>
    <link href="http://professor.github.io/journal/2013/07/11/frustration-quote.html"/>
    <updated>2013-07-11T14:22:00-07:00</updated>
    <id>http://professor.github.io/journal/2013/07/11/frustration-quote</id>
    <content type="html"><![CDATA[<p>I am frustrated when my expectations do not align with reality &ndash; Todd Sedano</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rethinking SEMAT card affordance]]></title>
    <link href="http://professor.github.io/journal/2013/05/22/rethinking-semat-card-affordance.html"/>
    <updated>2013-05-22T01:19:00-07:00</updated>
    <id>http://professor.github.io/journal/2013/05/22/rethinking-semat-card-affordance</id>
    <content type="html"><![CDATA[<h3>A possible solution</h3>

<p>While I&rsquo;m an avid player of card games and board games, the SEMAT card format does not reflect how I think about the alphas, which are a collection of states.</p>

<p>Here is a mock prototype of an alternative physical format for the SEMAT alphas.</p>

<p><span class="thumbnail-image-block ssNonEditable"><span><img src="http://professor.github.io/images/semat_strip_thumbnail.jpg" alt=""/></span></span></p>

<p>Each alpha is a strip of cards folded much like a scroll with the &ldquo;highest&rdquo; state on the inside, and the lowest state on the outside. Starting with the &ldquo;lowest&rdquo; state, the user of SEMAT, can incrementally unfold the strip comparing the current state with the next possible state. If the next possible state is achieved, then the user can continue to unroll the strip.</p>

<p><span class="thumbnail-image-block ssNonEditable"><span><img src="http://professor.github.io/images/semat_current_next_thumbnail.jpg" height=116 alt=""/></span></span></p>

<p>Now it is impossible to accidentally loose a state in the alpha, and displaying the current state for all alphas in a project takes up roughly 1/6 of the room of the SEMAT board.</p>

<p>So what do we call these new SEMAT cards? SEMAT strips, SEMAT rolls, SEMAT scrolls? I&rsquo;m open to suggestions.</p>

<h3>Background &mdash; the problem</h3>

<p>When I first saw a set of SEMAT cards, my instinct told me something wasn&rsquo;t quite right. I collect playing cards. I like unusual cards sets such as my agile estimation cards, XP training cards, improv feeling cards.</p>

<p>When I laid out six cards for an alpha, it felt messy. I could easily get these out of order, and the order matters in a single alpha. If I piled up several alphas without a rubber band, I could easily mix them together.</p>

<p>I pictured myself introducing this at a training session. With agile estimation cards, I just hand out a deck, yet for SEMAT I would want to hand one alpha at a time. If SEMAT cards were printed in a deck, taking out one alpha at a time would be time consuming.</p>

<p>I do think agile estimation cards work well. There are four sets in one deck, just like regular playing cards. Assuming that my five year old daughter found the deck and randomized it, sorting it wouldn&rsquo;t take too long with four sets. However SEMAT cards, there are many alphas, and sorting it would be tedious.</p>

<h3>Abacus as an alternative metaphor</h3>

<p>I stared considering an abacus. Each rod of the abacus could represent an alpha. Each bead on a rod could represent a state card. The space between the beads on the left and the beads on the right could represent the current state. Yet creating an abacus for SEMAT seemed unfeasible. Then it occurred to me, I could tape the SEMAT cards into a strip.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improving code readability -- turning comments into methods]]></title>
    <link href="http://professor.github.io/journal/2013/02/19/improving-code-readability-turning-comments-into-methods.html"/>
    <updated>2013-02-19T21:49:00-08:00</updated>
    <id>http://professor.github.io/journal/2013/02/19/improving-code-readability-turning-comments-into-methods</id>
    <content type="html"><![CDATA[<p>I&rsquo;m working with 21 developers to improve their code readability. Through a code read-through, they listen to another developer try and read their code. (See <a href="" title="http://sedano.org/journal/2011/3/30/code-readability-process.html">Code Readability Process</a> for more details.)</p>

<p>In reviewing one programmer&rsquo;s code, a sixty line method had a visual rhythm to it. There would be a blank space, a comment, then about ten lines of code, and the cycle would repeat. The comment would explained the code just following it.</p>

<p>The programmer realizes that the narrative is lost in their code, and feels compelled to add these comments to help the reader understand what is going on. These comments serve as section breaks or chapter headings.</p>

<p>Instead, the code could be split up into smaller methods, where each method name would clearly revel the intent of the code. The comment would be better served as a method invocation.</p>

<p>Here&rsquo;s the pattern</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//determine interest rate  (comment about the code intention)
</span><span class='line'>code
</span><span class='line'>code
</span><span class='line'>code</span></code></pre></td></tr></table></div></figure>


<p>Becomes</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>determine_interest_rate()</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the original code</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="n">bool</span> <span class="ss">Tictactoe</span><span class="p">:</span><span class="ss">:determine_game</span><span class="p">(</span><span class="n">int</span> <span class="n">row</span><span class="p">,</span> <span class="n">int</span> <span class="n">column</span><span class="p">,</span> <span class="n">char</span> <span class="n">move</span><span class="p">){</span>
</span><span class='line'>        <span class="n">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>        <span class="n">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="sr">//</span> <span class="no">Check</span> <span class="n">the</span> <span class="n">row</span> <span class="n">of</span> <span class="n">latest</span> <span class="n">play</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">flag</span><span class="p">){</span>
</span><span class='line'>           <span class="n">flag</span> <span class="o">=</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>           <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>           <span class="k">while</span><span class="p">((</span><span class="n">i</span><span class="o">&lt;</span><span class="n">dimension</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">flag</span><span class="o">==</span><span class="kp">true</span><span class="p">)){</span>
</span><span class='line'>               <span class="k">if</span><span class="p">(</span><span class="n">board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="n">move</span><span class="p">){</span>
</span><span class='line'>                   <span class="n">flag</span> <span class="o">=</span> <span class="kp">false</span><span class="p">;</span>
</span><span class='line'>               <span class="p">}</span>
</span><span class='line'>               <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>           <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="sr">//</span> <span class="no">Check</span> <span class="n">the</span> <span class="n">column</span> <span class="n">of</span> <span class="n">latest</span> <span class="n">play</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">flag</span><span class="p">){</span>
</span><span class='line'>            <span class="n">flag</span> <span class="o">=</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>            <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">while</span><span class="p">((</span><span class="n">i</span><span class="o">&lt;</span><span class="n">dimension</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">flag</span><span class="o">==</span><span class="kp">true</span><span class="p">)){</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">column</span><span class="o">]</span> <span class="o">!=</span> <span class="n">move</span><span class="p">){</span>
</span><span class='line'>                    <span class="n">flag</span> <span class="o">=</span> <span class="kp">false</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">flag</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the revised code.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>     <span class="n">bool</span> <span class="ss">Tictactoe</span><span class="p">:</span><span class="ss">:determine_game</span><span class="p">(</span><span class="n">int</span> <span class="n">row</span><span class="p">,</span> <span class="n">int</span> <span class="n">column</span><span class="p">,</span> <span class="n">char</span> <span class="n">move</span><span class="p">){</span>
</span><span class='line'>        <span class="n">bool</span> <span class="n">winner_found</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">winner_found</span> <span class="o">=</span> <span class="n">check_row_of_latest_play</span><span class="p">(</span><span class="n">row</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>                       <span class="n">check_column_of_latest_play</span><span class="p">(</span><span class="n">column</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>                       <span class="n">check_</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">winner_found</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>(Note that I have not shown other refactoring that I would do, as it would distract from the point.)</p>

<p>By changing the comment to a method call, the code is now more &ldquo;self documenting&rdquo; and the intent is clear by the method call.</p>

<p>When I suggested this to the programmer, she resisted the idea noting that a method call would affect performance. For a tic-tac-toe problem, this is a specious argument. However, is there merit to it? Will a modern compiler optimize this kind of refactoring? And this brings up a broader question, should we optimize code for performance or readability when we are writing it? Conventional wisdom says we should write code that is clean and easy to understand, and when we are done and have performance analysis with production data, then we know where to spend engineering effort to optimize critical sections. The one exception would be algorithm complexity and running times. (e.g. O(N) vs O(NxN)</p>

<p>I&rsquo;m now curious, is this a &ldquo;comment smell&rdquo;? Can comments be indicators to us programmers that the code we just wrote isn&rsquo;t very clear. The comment itself my inform us on how we need to refactor the code to make it more readable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improv game for software engineers: Program Counter]]></title>
    <link href="http://professor.github.io/journal/2012/07/27/improv-game-for-software-engineers-program-counter.html"/>
    <updated>2012-07-27T14:06:00-07:00</updated>
    <id>http://professor.github.io/journal/2012/07/27/improv-game-for-software-engineers-program-counter</id>
    <content type="html"><![CDATA[<p>I invited this improv game themed around software development for some Brazilian computer science students visiting my campus. It&rsquo;s a variant of the many reaction based, warm-up games (e.g. &ldquo;Whoosh Ball&rdquo;) that encourage quick response time and discourages over-thinking or planning a response. I like playing it with software developers because it makes more sense to them than these other games.</p>

<h3>Instructions</h3>

<p>Have the group form a circle.</p>

<p>Explain that we are going to mimic a program counter moving around the circle. Each person gets to say the instruction that the program counter is going to do. The instructions are <strong>&ldquo;Op&rdquo;</strong>, <strong>&ldquo;Loop N&rdquo;</strong>, <strong>&ldquo;Method Call&rdquo;</strong>, <strong>&ldquo;If true&rdquo;</strong>, <strong>&ldquo;If false&rdquo;</strong></p>

<p><strong>&ldquo;Op&rdquo;</strong> &mdash; There are a variety of operations that a normal CPU would do, such as add, subtract, store to a register. For this game, we&rsquo;ll simplify all of these possible operations into a single command &ldquo;op&rdquo; &mdash; have the entire circle practice that command going around. Pretty simple. Let&rsquo;s make it more interesting.</p>

<p><strong>&ldquo;Loop N&rdquo;</strong> &mdash; A basic control flow of most programming languages is the ability to go through a loop and do multiple instructions each time. If someone says &ldquo;loop 3&rdquo; this indicates that we are iterating over a collection with three elements. The next person says &ldquo;one&rdquo; indicating that the first set of instructions is now happening. The next person says &ldquo;two&rdquo;. The next person says &ldquo;three&rdquo;. Then we proceed as normal. (I&rsquo;ve seen one group say &ldquo;Loop Zero&rdquo; which we treated as a finished loop. It&rsquo;s just like saying &ldquo;Op&rdquo;) We do this for awhile until people get it.</p>

<p><strong>&ldquo;Method Call&rdquo;</strong> and point to someone or say their name out loud &mdash; Often programs re-use code by calling a method on that section of the code. If someone says method call and points to someone we are jumping to that section of the code. (That person needs to decide which way the program counter will continue.)  We keep executing instructions until someone says <strong>&ldquo;return&rdquo;</strong> at which point the program counter goes back to the person who said &ldquo;method call&rdquo; (Sometimes people will think that it returns to the person who was pointed at, but it returns to the person who started the method call, just like a real program.) Yes, method calls can be nested multiple times and even have recursion.</p>

<p>I personally like this operation. In many improv games, the equivalent operation is often a chance for the person to pass control to someone else without cost. E.g. I panic, I don&rsquo;t want this thing, I think it&rsquo;s a &ldquo;hot potato&rdquo; so I&rsquo;m going to give it to you quickly by saying &ldquo;Zoom&rdquo; so that I don&rsquo;t have to deal with it. However, in this game, there is a cost of saying &ldquo;Method Call&rdquo; for the person, they have to remember that they said it. Everyone else in the room, just really needs to track the depth or number of method calls that have been said, where as the people who say method call need to remember where they are on the stack.</p>

<p><strong>&ldquo;If true&rdquo;</strong> and <strong>&ldquo;if false&rdquo;</strong> &mdash; eventually we get tired of going around in the same direction &mdash; Our program counter is pretty simple and can&rsquo;t deal with branch predictions so whenever we use the IF statement, we pay a performance penalty and skip the next step, e.g. the next person. &ldquo;If true&rdquo; then will skip the next person. &ldquo;If false&rdquo; then reverses the direction and skips the next person. (Here&rsquo;s an example, if we moving clockwise and you say &ldquo;if true&rdquo;, we skip the person to the left. If you say &ldquo;if false&rdquo;, it skips the person to the right and proceed clockwise.)</p>

<p><strong>&ldquo;Cheer&rdquo;</strong> &mdash; As soon as the first mistake happens, agree upon a verbal saying that symbolizes, &ldquo;We are having fun, we made a mistake, and we get to restart!&rdquo; In my improv training that&rsquo;s been &ldquo;Ah-ooo-ga&rdquo;, the Brazilian students preferred &ldquo;Ciao!&rdquo; and I&rsquo;ve seen other positive vocalizations.</p>

<h3>Other considerations</h3>

<p>After introducing these instructions, I allow the group to invite any programming constructs that they can think of, and I say &ldquo;yes&rdquo; to any suggestion no how bizarre it is. Sometimes I&rsquo;ll allow the group to tweak it if it isn&rsquo;t clear. If you try something let me know.</p>

<p>One variant of &ldquo;<strong>op</strong>&rdquo; is to allow them to create any normal single instruction operation. They could say &ldquo;add&rdquo;, &ldquo;store&rdquo;, &ldquo;multiply&rdquo; instead of &ldquo;op&rdquo; &mdash; I suspect that doing this might be best at the beginning, but I have not tried that experiment.</p>

<p>Feel free to use this game. I&rsquo;m assuming that no-one will ever remember that I invited it. =)</p>

<h3>Game History</h3>

<p>On February 20, 2012, a student group from <a href="http://www.uniasselvi.com.br">Uniasselvi University</a>
in Brazil visited Carnegie Mellon University in Silicon Valley. Since I don&rsquo;t know Portuguese, Professor Jan Charles Gross graciously translated my instructions.</p>

<p><span class="full-image-block ssNonEditable"><span><img src="http://professor.github.io/images/ToddSedano%20with%20JanCharlesGross.png" alt=""/></span></span></p>

<p>Professor Gross&#8217; son, Professor Sedano, Chris Zeise, Professor Gross</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD: small Ah-Ha moment on when to use a hash instead of an array]]></title>
    <link href="http://professor.github.io/journal/2012/07/20/tdd-small-ah-ha-moment-on-when-to-use-a-hash-instead-of-an-array.html"/>
    <updated>2012-07-20T13:34:00-07:00</updated>
    <id>http://professor.github.io/journal/2012/07/20/tdd-small-ah-ha-moment-on-when-to-use-a-hash-instead-of-an-array</id>
    <content type="html"><![CDATA[<p>I&rsquo;m sharing a pleasant surprise I had during a recent Test Driven Development coding session. My tests had found a design that was delightful to me. TDD suggested that I use a hash where my natural tendency is to use an array.</p>

<p>For the purpose of clarity, I&rsquo;m simplifying a very complicated data structure for this example. Let&rsquo;s say we wanted to show the user the most popular cheat codes for a set of video games. For the sake of the example, let&rsquo;s assume that this information is stored in the database in a way that is rather difficult to access. Thus the need for a method &ldquo;most_popular_cheats&rdquo; to do the heavy lifting.</p>

<p>Let&rsquo;s recall some popular cheat codes. Contra&rsquo;s cheat code is &ldquo;UP, UP, DOWN, DOWN, LEFT, RIGHT, LEFT, RIGHT, B, A, START&rdquo;  and Mike Tyson&rsquo;s cheat code is &ldquo;007-373-5963&rdquo;</p>

<p>From the control flow, I would already know the order of the video games that needed cheat codes, and expected that the method &ldquo;most_popular_cheats&rdquo; would just return an array.</p>

<p>However, as I wrote the test first, I realized that the test wouldn&rsquo;t know the exact order of the video games. After I created some test data in the database, I wasn&rsquo;t certain how they would be retrieved, would the default sorting be by ID, or by name? The test didn&rsquo;t know and I didn&rsquo;t think the test should care. If the method returned a hash, I could just see if the hash contained the key->value pairs that I expected.</p>

<pre><code>Hash: {contra.id =&gt; "UP, UP….", mike_tyson.id =&gt; "007-373-6963"}
</code></pre>

<p>On previous projects, following the traditional &ldquo;code then test&rdquo; development style, I have generated two parallel arrays to solve this problem kind of problem. One that contained the answer (what is my value in my hash), and the other that contained the index (what is my key in my hash.) On those projects, it had not occurred to me that a hash was a better data structure. My tests informed me on a programming nuance that I had previously missed.</p>

<p>Here&rsquo;s the simplified version of test case that lead me to this small ah-ha moment.</p>

<pre><code>contra = FactoryGirl.create(:video_game_with_popular_cheats)
mike_tyson = FactoryGirl.create(:video_game_with_popular_cheats)

popular_game_cheats = Game.most_popular_cheats
popular_game_cheats = should be_a_kind_of(Hash)
popular_game_cheats[contra.id].should = "UP, UP, DOWN, DOWN, LEFT, RIGHT, LEFT, RIGHT, B, A, START"
popular_game_cheats[mike_tyson.id].should = "007-373-5963"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Test Driven Development (TDD) through katas]]></title>
    <link href="http://professor.github.io/journal/2012/06/01/learning-test-driven-development-tdd-through-katas.html"/>
    <updated>2012-06-01T12:53:00-07:00</updated>
    <id>http://professor.github.io/journal/2012/06/01/learning-test-driven-development-tdd-through-katas</id>
    <content type="html"><![CDATA[<p>In my graduate course, &ldquo;craft of software development&rdquo; students created individual learning plans to accomplish their goals. Many choose to enhance their testing and design skills by focusing on Test Driven Development. (TDD)</p>

<p>While the data sample is low (5 students), it appears that doing katas followed by a project is preferred to just doing katas alone. By working through a kata, you practice the the skill in a very focused, tactile manner on a small problem. Once done, you can compare many posted kata solutions on the internet and use them for reflection. Then by working on a project, you can practice TDD while dealing with domain specific issues and complexities that arise from a larger problem. One student found that re-implementing a previous project was immensely valuable, as he was able to compare his new solution to his previous implementation.</p>

<p>Not all katas are created equal for the purpose of learning TDD. Some are too simple; some are too algorithmic in nature. (For these, creating the test suite is straightforward, yet improving running time is not.) Swapna Varghese ordered a set of katas for how easy they are to implement in TDD. Note that the ones at the end of the list are not necessarily better at teaching TDD, in fact, it may be hard to complete them using TDD.</p>

<p>A suggested path then would be to take an easy one (e.g. one of the first three) as a warm-up exercise to validate your test environment, and then move onto some in the middle. I&rsquo;m partial towards Gilded Rose. Mars Rover was a definite favorite among my students. As with Goldlocks, it wasn&rsquo;t too simple, it wasn&rsquo;t too algorithmic, it &ldquo;was just right.&rdquo;</p>

<p>Exhibit 1: Katas sorted by how easy it is to apply TDD.</p>

<ol>
<li><a href="" title="http://codingdojo.org/cgi-bin/wiki.pl?KataFizzBuzz">Fizz Buzz</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/prime-factors-kata">Prime Factors</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/string-calculator">String Calculator</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/gilded-rose-kata">Gilded Rose</a></li>
<li><a href="" title="http://codingdojo.org/cgi-bin/wiki.pl?KataWordWrap">Word Wrap</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/tennis-game-kata">Tennis Game</a></li>
<li><a href="" title="http://butunclebob.com/ArticleS.UncleBob.TheBowlingGameKata">Bowling Game</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/mars-rover-kata">Mars Rover</a></li>
<li><a href="" title="http://codingdojo.org/cgi-bin/wiki.pl?KataRomanNumerals">Roman Numerals</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/coin-change-kata">Coin Change</a></li>
<li><a href="" title="http://codingdojo.org/cgi-bin/wiki.pl?KataGameOfLife">Game of Life</a></li>
<li><a href="" title="http://craftsmanship.sv.cmu.edu/posts/potter-kata">Potter</a></li>
</ol>


<p><p>Not helpful in learning TDD: <a href="" title="http://craftsmanship.sv.cmu.edu/posts/weighing-with-stones-kata">Weighing with Stones</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Engineering isn't a solo activity]]></title>
    <link href="http://professor.github.io/journal/2012/04/05/software-engineering-isnt-a-solo-activity.html"/>
    <updated>2012-04-05T13:32:00-07:00</updated>
    <id>http://professor.github.io/journal/2012/04/05/software-engineering-isnt-a-solo-activity</id>
    <content type="html"><![CDATA[<p>Often as engineers we like to go for it alone. It&rsquo;s me versus the machine. Yet, involving others can be helpful with us in our career. In my course &ldquo;craft for software development&rdquo; I challenged my students to think of ways to add a social component to their software development experience.
Here is some of their feedback: (list is unsorted)</p>

<ol>
<li>Ask a friend to review your code</li>
<li>Pair program with a friend</li>
<li>Pair program with a stranger (there are websites that do this)</li>
<li>Attend a meetup or an unconference. Meet beginners, intermediates, and experts.</li>
<li>Find out where people in your community hang-out (mailing list, IRC, etc)</li>
<li>See who is around you that you might not be considering. (For example, students in a different masters program, PhD students.)</li>
<li>Post to CMU SV facebook group.</li>
<li>Contact alumni who might know working professionals with the expertise in the field.</li>
<li>Posting code for review online. Post on a blog and have people comment on it.</li>
<li>Attend a &ldquo;hackathon,&rdquo; &ldquo;hackernoon,&rdquo; or spend time at a software dojo</li>
<li>Use linked-in to do a search on appropriate skill to see who is in your network</li>
<li>CMU has a mentoring program in the bay area</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preparing yourself for a software development career]]></title>
    <link href="http://professor.github.io/journal/2011/12/08/preparing-yourself-for-a-software-development-career.html"/>
    <updated>2011-12-08T14:43:00-08:00</updated>
    <id>http://professor.github.io/journal/2011/12/08/preparing-yourself-for-a-software-development-career</id>
    <content type="html"><![CDATA[<p>Sometimes people ask me, &ldquo;what should I do to transition from my current career into a software development career?&rdquo; Many have answered this question, but here are my suggestions.</p>

<p><strong>Talk to people who are software developers.</strong> See if you will like doing what they are doing. One of my good friends entered the field not because they loved writing code, but they wanted to earn a great salary. We both finished the undergraduate computer science program at Carnegie Mellon University. He hated the courses and once he graduated, he continued to hate programming while in industry. Before you invest significant time and money into a new career check it out.</p>

<p>If you are going to be writing code, then you will also be finding defects. This can be a very annoying, frustrating, and unfulfilling part of the job. For example, there&rsquo;s a new third-party library you will want to use (or a new language feature, or a new framework). You&rsquo;ll read the API and write code that should work. But it doesn&rsquo;t. How do you figure out what is going wrong. This is a hard skill to learn. Sometimes typing it into google will solve the answer, but it wont&#8217; always work and it is clear that you don&rsquo;t have enough knowledge of what is really going on. It will make you feel like an idiot. Debugging is part of the job. There are some who really enjoy figuring out why something is broken and enjoy the journey. I only enjoy the destination, working code. Teachers have to do grading. Nurses have to deal with blood. We fix defects.</p>

<p><strong>Find a mentor.</strong> Find a friend who is good at software development and learn everything that they know. Write software with them. Do paired programming. If you don&rsquo;t know anyone, find some one. Go where the geeks are hanging out. Search meetup.com for groups that meet in your area. If you still can&rsquo;t find someone, it&rsquo;s probably because you aren&rsquo;t trying. If you already know a programming language, work with people in an open source project. Let them know that you want to help and could they mentor you. Several core contributors to projects began their journey this way. Learn the programming language that your mentor knows.</p>

<p><strong>Learn an object-oriented programming language.</strong> Take courses at your local community college. Start going to meetups. Contribute to open source projects. If you skipped the &ldquo;find a mentor&rdquo; step because it is too hard, go back and do it. Working with open source projects can be a great way to find a mentor. Note that you don&rsquo;t necessarily need to know an &ldquo;object-oriented&rdquo; programming language, but most people in industry will expect you to know the fundamentals behind object-oriented programming, so you might as well start here.</p>

<p><strong>Learn the basics.</strong> Take courses at your local community college in data structures and algorithms.</p>

<p>While there are great books that will help you on your journey, reading will only get you so far. The easiest way to learn the craft of software development is by writing code with someone else. Once you start writing code and begin to get the basics, I would recommend checking out &ldquo;Apprenticeship Patterns&rdquo; and &ldquo;New Programmer&rsquo;s Survival Manual&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improv meets Software Engineering, what might the intersection look like?]]></title>
    <link href="http://professor.github.io/journal/2011/06/16/improv-meets-software-engineering.html"/>
    <updated>2011-06-16T21:32:00-07:00</updated>
    <id>http://professor.github.io/journal/2011/06/16/improv-meets-software-engineering</id>
    <content type="html"><![CDATA[<p>When I first discovered improv, I enjoyed the creative play and sheer freedom it offered me. The basic tenets of improv gave me a safe place to unleash my creativity. The right side of my brain finally had an outlet. (I couldn&rsquo;t draw or play an instrument. I did enjoy singing, but I knew not to do that in a public setting!) I enjoyed every improv exercise that was introduced to me. Finally, I had an outlet to be creative and to play.</p>

<p>For the longest time, I didn&rsquo;t see how this could apply to software development. Deep down, I knew there must be a connection, but how could doing quick, fun exercises relate to software?</p>

<p>I did see how improv was affecting me and my style. My public speaking confidence was increasing. I was faster with responses to tough questions. My eye contact with others was on the rise. While I&rsquo;ve been an active listener, I noticed areas that I could grow. I saw how those skills translated directly to my work. Brainstorming was more effective when we bypass the critical analytical components of the brain. Teams could be more effective if they could more readily accept ideas from teammates. (If we don&rsquo;t agree with an idea, we tend not to accept it. However we can accept an offer from someone else without agreeing with it. Even with a ridiculous suggestion, good ideas can emerge.)</p>

<p>In preparing for the Applied Improvisors Network (AIN) conference of 2011, I reflected on software development and its intersection with improv. I came to a new realization, are not the agile methods aligned with the notions of improv? Let&rsquo;s look at ideas from improv and see how they map into modern software development.</p>

<p>The whole improve troop owns the show. If a performer steps out on stage, they are committing to the team that they have five seconds worth of an idea and trusts that the rest of the team will help them the rest. Agile methods encourage &ldquo;whole team&rdquo; where the entire team responsible for ownership of software development and management. This encourage collective owning of the source code repository where any member of the team can make changes as well as the notion that the team can manage itself. Improvisators set out to make their partner look good. Scene work happens when the entire troupe is helping and working together. This includes knowing when to go on stage in order to further a scene along and knowing when not to go on stage because everything is going to work out fine.Software developers want their team to look good.</p>

<p>Change: Improv thrives in chaotic situations. Improvisers are trained to deal with change. When improvisers are operating at the speed of thought on stage, anything can happen, and improvers try to make sense of it all. Agile methods are more ideal than traditional methods in environments where the requirements are changing. Even Extreme Programming&rsquo;s slogan is &ldquo;embrace change&rdquo;</p>

<p>Improvisers learn to be loose with their own ideas. In the dynamic environment of the stage, they need to be present in the moment, dealing with what is going on. If they are thinking too much about where they want the scene to head, they will miss out on where the scene is actually going. You can observe this when a performer says something that sounds like they weren&rsquo;t listening to what was just said. The performer was &ldquo;in their head&rdquo; trying to plan ahead and missed the last offer from their peer. We see this flexibility in the agile principals. With Test Driven Development, software developers hold the code loosely. Code written yesterday might be refactored and improved today. There isn&rsquo;t this notion of ideal or prefect software that never changes. As the situation changes, so does the code.</p>

<p>Improvisers work on actively listening. Extreme Programming&rsquo;s on site customer provides a direct customer voice into the software development process. As the engineer understands in real time the requirements from the customer, software is developed and refined in quick coding cycles.</p>

<p>Improvisers have techniques to celebrate failure. This is imperative because improvisers will fail. In warm up games, improvisers that aren&rsquo;t failing aren&rsquo;t playing them too safely. Agile methods have quick iterations and rapid software prototyping that allows for (in a software sense) for features to be explored and &ldquo;fail.&rdquo; If something isn&rsquo;t working right it is tweaked in the next iteration. Albeit the timeframe is different. Obviously improvisers fail numerous times during a warm up and might make unusual choices on stage, where as the timeframe on requirements churn might be the next iteration typically one week to four weeks. In a paired programming setting, ideas can be tried and experimented upon. Failure in this context may happen routinely during a coding session. Coder 1: Should this be a new class or should we modify an existing class? Coder 2: I don&rsquo;t know, let&rsquo;s try option 1. After a few minutes if option 1 isn&rsquo;t working out, they can quickly switch to option 2.</p>

<p>Interestingly, the improv game &ldquo;word at a time&rdquo; maps into paired programming. In &ldquo;word at a time&rdquo; a group tells a story with each person saying only one word. This exercise teaches shared ownership and the frustration of planning ahead. Variants of the game include &ldquo;one sentence at a time&rdquo; or &ldquo;1, 2, 3, 4, 3, 2, 1 words at a time.&rdquo; In paired programming, developers work on the same code at the same time. Typically the code is shown on one monitor but there are two keyboards and two mice so that at any point in time, either developer can start typing what they are thinking. There are many benefits to paired programming including high quality product with less defects, a product that is ready to be shipped sooner, team ownership of the entire code based (as opposed to code silos owned by a single programmer), shared understanding of the code base (every line of code was written by two people, if one leaves the company someone else knows what that code was doing). Often in pair programming, developers may take turns. I&rsquo;ll write a test case and my partner will make the code work. They will then write a test case, and I&rsquo;ll then get it to work. This practice is called ping-pong paired programming. This is much like &ldquo;A paragraph at a time&rdquo; The emphasis is on the dialogue between the two engineers and the code is the artifact of the conversation that happened.</p>

<p>Today, I see many similarities between improv and software development. I suspect that there are new concepts in software development that might be explored given insights in improv. That is a topic of more future research.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Panel Feedback]]></title>
    <link href="http://professor.github.io/journal/2011/06/08/panel-feedback.html"/>
    <updated>2011-06-08T14:10:00-07:00</updated>
    <id>http://professor.github.io/journal/2011/06/08/panel-feedback</id>
    <content type="html"><![CDATA[<p>What did you learn from the panel, and what are you going to do about it?
Team Couch Potatoes / AppJour / ActiveMob
Our experience with the panel this last Wednesday was of great help in preparing us for our solicitation of feedback from potential customers. One of the more important issues we addressed was that the customer panel had a difficult time, initially, distinguishing our application from that of our competitors. We will need to do a better job addressing what makes our product unique in future pitches if we want to keep listeners engaged. We also noticed that while not everyone was interested in using our application, those that were indicated that they would also be willing to pay for it. To us this means that there is a legitimate market for our application, especially for those that are already active. This was encouraging and should help us to focus our search for user feedback in the coming weeks.
Team four of a Kind &mdash;
  In preparation for this week’s panel, Team 4 of a Kind planned a handful of new concepts for our pitch. We were looking to get feedback on both things that hadn’t been pitched in the past and to see if our older core features were compelling to new users.  We introduced a name change on one of our core features from Quick Workouts to Fit Quests, a Virtual Buddy, and a pitch strategy that involved having the panelists actually go through a Fit Quest. Although the panelists agreed to do the Fit Quest, there was no feedback on how the quest felt or if the naming of the quest helped differentiate itself from the competition.  A positive comment was given on the Virtual Buddy saying it gave an emotional and personal touch.  This was also the first time several of the panelists heard some of the older features as well.  One of the recurring pieces of feedback from first time viewers were that users felt our application had too much text, which suggests a lack of graphics.  A few users also suggested the use of movies both as incentives and as tutorials to workout.  Some of the same feedback that we had heard in the past that was repeated at the panel was that the fitness market already has a lot of competition and that this type of tool is too easy to cheat on. Finally, we also got feedback suggesting working out should be an individual activity and group challenges may just be a fad, which was one of our earlier discussions on deciding to emphasize quick workouts of group challenges.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preparing for the first panel]]></title>
    <link href="http://professor.github.io/journal/2011/06/03/preparing-for-the-first-panel.html"/>
    <updated>2011-06-03T13:00:00-07:00</updated>
    <id>http://professor.github.io/journal/2011/06/03/preparing-for-the-first-panel</id>
    <content type="html"><![CDATA[<p>This is about class three (June 1st, 2011) from the course <a href="Real%20World%20Software%20Engineering%20for%20Entrepreneurs%20(A%20Startup%20Accelerator">http://www.cmu.edu/silicon-valley/academics/new-course/silicon-valley-startup-experience.html</a></p>

<p>From the instructors, Scott Russell and Todd Sedano</p>

<p>It&rsquo;s normal to be apprehensive about your first panel. It&rsquo;s not clear where you are headed with your idea, and you haven&rsquo;t had a chance to validate it with the marketplace. You are focused in the coding trenches trying to get something to work, it&rsquo;s time to pop out and see what the market thinks of your idea.</p>

<p>When you meet with the panel, you&rsquo;ve got to tell people how it is supposed to work. You are looking for their feedback reaction. Then you will learn how far off you are. Embrace expectation failure, you need this feedback.
The panel knows that your product is &ldquo;raw&rdquo; and not finished.
If you think you know who your target customer is, put that forward. If you aren&rsquo;t certain, hazard a bold specific guess. &ldquo;Our customer is film lovers in their early 20&rsquo;s.&rdquo; If you know the makeup of the panel, then you can see if the panel is your target customer. When you are speaking to an intellectual group in their 40&rsquo;s, don&rsquo;t be surprised if they don&rsquo;t resonate with a product geared for Lady Gaga music fans.
When presenting your product, don&rsquo;t focus on what the product does, but what problem you are trying to solve. Be provocative. Tell them it cures cancer. If they don&rsquo;t think your product does that, find out why. Find out how you are missing the mark. If you were selling an Recreational Vehicle (RV), you don&rsquo;t sell the customer on the miles per gallon or the capacity of the septic tank, you sell them on the vision: imagine being at the lake fishing with your family.
Put on your sales hat and BS about what the product does. Don&rsquo;t tell them what the product is going to go. Avoid &ldquo;we working towards a release one where &hellip;..&rdquo; and &ldquo;we think that the nominal market will be.&rdquo; Instead be bold and clear. &ldquo;Our product is facebook for the medical community.&rdquo; Be laser focused. Be specific about the key core functionality. You aren&rsquo;t going to release a product that works on every phone. &ldquo;For the first release, our product works on the iPhone platform.&rdquo; If people want more and more features, it&rsquo;s ok to delay the features. You don&rsquo;t have an infinite amount of time and money to build everything.
The common user won&rsquo;t understand technology. You can explain what it is and what it will do for them, but don&rsquo;t get lost in Acromania. &ldquo;We&rsquo;ve done the hard work to build something special.&rdquo; It was tough to do, but you are making it easy for them. It&rsquo;s a defensible asset.
Consider how you will end your presentation. What do you want from the panel? Ask them a question. You have just spent six minutes of your valuable time presenting to this panel, what is your ask?
ask the panel a question.
We&rsquo;ve asked the teams to consider their strategy for their first panel. Here is a sample of their thoughts.</p>

<p><strong>Team Coach Potatoes (Andrew Steele, Anooj Vagadia, Patrick Baumann, Henry Fung)</strong>
As a development team working on an as yet unreleased product, we are looking to get as much out of Wednesday’s panel as possible. Most importantly, we will be trying to assess the feasibility of our idea and its potential worth. Part of our presentation to the panel will consist of a demo of our current features and discussion of upcoming features. We hope to gather feedback regarding which features are of value, which are not and which would be worth spending money to have. Our application is targeted specifically towards individuals who are active, which may affect the objectivity of the panel’s feedback if they are not active themselves. However, it is still important to gather feedback from non-athletes to determine if our application will be appealing or motivating to them. If the application is not appealing, we will ask if there are changes which can be made to make it more so. We look forward to Wednesday’s opportunity.</p>

<p><strong>Team Four of a Kind (Alan Mak, Kevin Tsai, Matthew Lanken, Paul Wong)</strong>
Our main strategy for the 4th week pitch is to focus on getting the panelists more involved with the theme and vision of the product. By doing so, the panelists would get a sense of why there is a need to use the product.  Several past criticisms suggest pitches didn’t have a direct and exaggerative tone suitable for marketing, and were instead received as a simple explanation of the product.  During our pitch, we plan to emphasize the magnitude and greatness of the application while being more direct in our pitch towards the panel.  We plan to pitch to them as if they were the ideal target customers, and why they need to use the application.  Aside from involving panelists with our tone, we will also introduce a few interactive gimmicks such as distribute four playable demos of the application, a tutorial that will guide users through a quick workout and allow them to follow along, and props to enhance the theme of fitness and quick workouts.  We also plan to take this opportunity to get user feedback and weigh some of the other selling points of the application such as the virtual buddy and achievements.</p>

<p><strong>Team Opinionize (Gaurav Sinha, Rob Engel, Phil Melzer, Vinay Prasad)</strong>
Our strategy in the panel pitch next week is to get more feedback about the product, its use cases and reasons why people will buy or not buy it. The other important part of our strategy is to make the most of the experience the panel brings in the room.
We need to understand our target customers. We believe that it could be anyone who has the problem of categorizing large amounts of data but we want to narrow down on our users. Adam mentioned that our probable users could be geeks who use / edit Wikipedia articles. For this reason, we will present a case for members in the panel to use the product, based on our knowledge of their interests. Their feedback will be valuable in determining whether the product is for everyone or not.
We want to get feedback about what makes the product viral? And why? The panel consists of people who have the experience in the market and can judge what is going to hit or what is not.
We plan to keep our description of the product at a very high level and at the same time we would explain the concept in simple terms, which a non-geeky person can understand. Keeping the description at a high level allows room for improvement based on panel feedback. At the same time we would like to explain the concept with daily life problems as examples so that its clear to the audience. We plan to do a live demo of Opinionize with these examples, which would help the panel get a feel of the product.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Real World Software Engineering for Entrepreneurs (A Startup Accelerator)]]></title>
    <link href="http://professor.github.io/journal/2011/06/02/real-world-software-engineering-for-entrepreneurs-a-startup-accelerator.html"/>
    <updated>2011-06-02T21:48:00-07:00</updated>
    <id>http://professor.github.io/journal/2011/06/02/real-world-software-engineering-for-entrepreneurs-a-startup-accelerator</id>
    <content type="html"><![CDATA[<p>Preparing for your first panel &ndash; Class Three &ndash; June 1, 2011</p>

<p>From the instructors, Scott Russell and Todd Sedano</p>

<p>It&rsquo;s normal to be apprehensive about your first panel. It&rsquo;s not clear where you are headed with your idea, and you haven&rsquo;t had a chance to validate it with the marketplace. You are focused in the coding trenches trying to get something to work, it&rsquo;s time to pop out and see what the market thinks of your idea.<br/>
When you meet with the panel, you&rsquo;ve got to tell people how it is supposed to work. You are looking for their feedback reaction. Then you will learn how far off you are. Embrace expectation failure, you need this feedback.
The panel knows that your product is &ldquo;raw&rdquo; and not finished.
If you think you know who your target customer is, put that forward. If you aren&rsquo;t certain, hazard a bold specific guess. &ldquo;Our customer is film lovers in their early 20&rsquo;s.&rdquo; If you know the makeup of the panel, then you can see if the panel is your target customer. When you are speaking to an intellectual group in their 40&rsquo;s, don&rsquo;t be surprised if they don&rsquo;t resonate with a product geared for Lady Gaga music fans.
When presenting your product, don&rsquo;t focus on what the product does, but what problem you are trying to solve. Be provocative. Tell them it cures cancer. If they don&rsquo;t think your product does that, find out why. Find out how you are missing the mark. If you were selling an Recreational Vehicle (RV), you don&rsquo;t sell the customer on the miles per gallon or the capacity of the septic tank, you sell them on the vision: imagine being at the lake fishing with your family.
Put on your sales hat and BS about what the product does. Don&rsquo;t tell them what the product is going to go. Avoid &ldquo;we working towards a release one where &hellip;..&rdquo; and &ldquo;we think that the nominal market will be.&rdquo; Instead be bold and clear. &ldquo;Our product is facebook for the medical community.&rdquo; Be laser focused. Be specific about the key core functionality. You aren&rsquo;t going to release a product that works on every phone. &ldquo;For the first release, our product works on the iPhone platform.&rdquo; If people want more and more features, it&rsquo;s ok to delay the features. You don&rsquo;t have an infinite amount of time and money to build everything.
The common user won&rsquo;t understand technology. You can explain what it is and what it will do for them, but don&rsquo;t get lost in Acromania. &ldquo;We&rsquo;ve done the hard work to build something special.&rdquo; It was tough to do, but you are making it easy for them. It&rsquo;s a defensible asset.
Consider how you will end your presentation. What do you want from the panel? Ask them a question. You have just spent six minutes of your valuable time presenting to this panel, what is your ask?
ask the panel a question.
We&rsquo;ve asked the teams to consider their strategy for their first panel. Here is a sample of their thoughts.</p>

<p><strong>Team Coach Potatoes (Andrew Steele, Anooj Vagadia, Patrick Baumann, Henry Fung)</strong>
As a development team working on an as yet unreleased product, we are looking to get as much out of Wednesday’s panel as possible. Most importantly, we will be trying to assess the feasibility of our idea and its potential worth. Part of our presentation to the panel will consist of a demo of our current features and discussion of upcoming features. We hope to gather feedback regarding which features are of value, which are not and which would be worth spending money to have. Our application is targeted specifically towards individuals who are active, which may affect the objectivity of the panel’s feedback if they are not active themselves. However, it is still important to gather feedback from non-athletes to determine if our application will be appealing or motivating to them. If the application is not appealing, we will ask if there are changes which can be made to make it more so. We look forward to Wednesday’s opportunity.</p>

<p><strong>Team Four of a Kind (Alan Mak, Kevin Tsai, Matthew Lanken, Paul Wong)</strong>
Our main strategy for the 4th week pitch is to focus on getting the panelists more involved with the theme and vision of the product. By doing so, the panelists would get a sense of why there is a need to use the product.  Several past criticisms suggest pitches didn’t have a direct and exaggerative tone suitable for marketing, and were instead received as a simple explanation of the product.  During our pitch, we plan to emphasize the magnitude and greatness of the application while being more direct in our pitch towards the panel.  We plan to pitch to them as if they were the ideal target customers, and why they need to use the application.  Aside from involving panelists with our tone, we will also introduce a few interactive gimmicks such as distribute four playable demos of the application, a tutorial that will guide users through a quick workout and allow them to follow along, and props to enhance the theme of fitness and quick workouts.  We also plan to take this opportunity to get user feedback and weigh some of the other selling points of the application such as the virtual buddy and achievements.</p>

<p><strong>Team Opinionize (Gaurav Sinha, Rob Engel, Phil Melzer, Vinay Prasad)</strong>
Our strategy in the panel pitch next week is to get more feedback about the product, its use cases and reasons why people will buy or not buy it. The other important part of our strategy is to make the most of the experience the panel brings in the room.
We need to understand our target customers. We believe that it could be anyone who has the problem of categorizing large amounts of data but we want to narrow down on our users. Adam mentioned that our probable users could be geeks who use / edit Wikipedia articles. For this reason, we will present a case for members in the panel to use the product, based on our knowledge of their interests. Their feedback will be valuable in determining whether the product is for everyone or not.
We want to get feedback about what makes the product viral? And why? The panel consists of people who have the experience in the market and can judge what is going to hit or what is not.
We plan to keep our description of the product at a very high level and at the same time we would explain the concept in simple terms, which a non-geeky person can understand. Keeping the description at a high level allows room for improvement based on panel feedback. At the same time we would like to explain the concept with daily life problems as examples so that its clear to the audience. We plan to do a live demo of Opinionize with these examples, which would help the panel get a feel of the product.</p>

<p>From the instructors, Scott Russell and Todd Sedano
It&rsquo;s normal to be apprehensive about your first panel. It&rsquo;s not clear where you are headed with your idea, and you haven&rsquo;t had a chance to validate it with the marketplace. You are focused in the coding trenches trying to get something to work, it&rsquo;s time to pop out and see what the market thinks of your idea.<br/>
When you meet with the panel, you&rsquo;ve got to tell people how it is supposed to work. You are looking for their feedback reaction. Then you will learn how far off you are. Embrace expectation failure, you need this feedback.
The panel knows that your product is &ldquo;raw&rdquo; and not finished.
If you think you know who your target customer is, put that forward. If you aren&rsquo;t certain, hazard a bold specific guess. &ldquo;Our customer is film lovers in their early 20&rsquo;s.&rdquo; If you know the makeup of the panel, then you can see if the panel is your target customer. When you are speaking to an intellectual group in their 40&rsquo;s, don&rsquo;t be surprised if they don&rsquo;t resonate with a product geared for Lady Gaga music fans.
When presenting your product, don&rsquo;t focus on what the product does, but what problem you are trying to solve. Be provocative. Tell them it cures cancer. If they don&rsquo;t think your product does that, find out why. Find out how you are missing the mark. If you were selling an Recreational Vehicle (RV), you don&rsquo;t sell the customer on the miles per gallon or the capacity of the septic tank, you sell them on the vision: imagine being at the lake fishing with your family.
Put on your sales hat and BS about what the product does. Don&rsquo;t tell them what the product is going to go. Avoid &ldquo;we working towards a release one where &hellip;..&rdquo; and &ldquo;we think that the nominal market will be.&rdquo; Instead be bold and clear. &ldquo;Our product is facebook for the medical community.&rdquo; Be laser focused. Be specific about the key core functionality. You aren&rsquo;t going to release a product that works on every phone. &ldquo;For the first release, our product works on the iPhone platform.&rdquo; If people want more and more features, it&rsquo;s ok to delay the features. You don&rsquo;t have an infinite amount of time and money to build everything.
The common user won&rsquo;t understand technology. You can explain what it is and what it will do for them, but don&rsquo;t get lost in Acromania. &ldquo;We&rsquo;ve done the hard work to build something special.&rdquo; It was tough to do, but you are making it easy for them. It&rsquo;s a defensible asset.
Consider how you will end your presentation. What do you want from the panel? Ask them a question. You have just spent six minutes of your valuable time presenting to this panel, what is your ask? ask the panel a question.</p>

<p>We&rsquo;ve asked the teams to consider their strategy for their first panel. Here is a sample of their thoughts.
Team Coach Potatoes (Andrew Steele, Anooj Vagadia, Patrick Baumann, Henry Fung)As a development team working on an as yet unreleased product, we are looking to get as much out of Wednesday’s panel as possible. Most importantly, we will be trying to assess the feasibility of our idea and its potential worth. Part of our presentation to the panel will consist of a demo of our current features and discussion of upcoming features. We hope to gather feedback regarding which features are of value, which are not and which would be worth spending money to have. Our application is targeted specifically towards individuals who are active, which may affect the objectivity of the panel’s feedback if they are not active themselves. However, it is still important to gather feedback from non-athletes to determine if our application will be appealing or motivating to them. If the application is not appealing, we will ask if there are changes which can be made to make it more so. We look forward to Wednesday’s opportunity.
Team Four of a Kind (Alan Mak, Kevin Tsai, Matthew Lanken, Paul Wong)Our main strategy for the 4th week pitch is to focus on getting the panelists more involved with the theme and vision of the product. By doing so, the panelists would get a sense of why there is a need to use the product.  Several past criticisms suggest pitches didn’t have a direct and exaggerative tone suitable for marketing, and were instead received as a simple explanation of the product.  During our pitch, we plan to emphasize the magnitude and greatness of the application while being more direct in our pitch towards the panel.  We plan to pitch to them as if they were the ideal target customers, and why they need to use the application.  Aside from involving panelists with our tone, we will also introduce a few interactive gimmicks such as distribute four playable demos of the application, a tutorial that will guide users through a quick workout and allow them to follow along, and props to enhance the theme of fitness and quick workouts.  We also plan to take this opportunity to get user feedback and weigh some of the other selling points of the application such as the virtual buddy and achievements.
Team Opinionize (Gaurav Sinha, Rob Engel, Phil Melzer, Vinay Prasad)Our strategy in the panel pitch next week is to get more feedback about the product, its use cases and reasons why people will buy or not buy it. The other important part of our strategy is to make the most of the experience the panel brings in the room.
We need to understand our target customers. We believe that it could be anyone who has the problem of categorizing large amounts of data but we want to narrow down on our users. Adam mentioned that our probable users could be geeks who use / edit Wikipedia articles. For this reason, we will present a case for members in the panel to use the product, based on our knowledge of their interests. Their feedback will be valuable in determining whether the product is for everyone or not.
We want to get feedback about what makes the product viral? And why? The panel consists of people who have the experience in the market and can judge what is going to hit or what is not.
We plan to keep our description of the product at a very high level and at the same time we would explain the concept in simple terms, which a non-geeky person can understand. Keeping the description at a high level allows room for improvement based on panel feedback. At the same time we would like to explain the concept with daily life problems as examples so that its clear to the audience. We plan to do a live demo of Opinionize with these examples, which would help the panel get a feel of the product.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Career and Software Craftsmanship]]></title>
    <link href="http://professor.github.io/journal/2011/05/04/career-and-software-craftsmanship.html"/>
    <updated>2011-05-04T23:29:00-07:00</updated>
    <id>http://professor.github.io/journal/2011/05/04/career-and-software-craftsmanship</id>
    <content type="html"><![CDATA[<p>Students in the craft of software development course read Sections &ldquo;Walking the long road&rdquo; and &ldquo;Draw your own map&rdquo; in the Apprenticeship Patterns book. We then discussed whether their notions of their career had been affected by the course and the readings. During our conversation, some students talked about the idea that people can&rsquo;t stay technical their entire careers. (I see this as a misperception, and discussed several people I know who are still programming late into their careers.)
My full time students are actively interviewing for jobs when they graduate. Most had not considered looking for a job that would enhance their software craftsmanship skills, while salary, prestige of the company, and projects they were working on dominated their searching process.
From my Improv for Software Engineers course, I have noticed that my master students who are in their 20&rsquo;s and 30&rsquo;s have a hard time picturing their future in great detail and will actively refuse to consider life later on unless coached carefully to do so. They lump ages 50 to 80 in one bucket, the distant future. In my improv exercise, I have them walk around the room and I ask them to picture life as it was when they are a certain age. For the most part, they are able to recall and relive life at the age of 7, 12, 18, 23. However, as we get into the future, it&rsquo;s harder for them, and after the age of 60 most stop the exercise and resort to comedy to deal with the tension of thinking about the distant future.
We discussed two hypothetical job offers. One pays $20,000 more money, the other allows them to grow their software development skills. Which one would they pick?
While the conversation was enlightening for the students, I wonder how much of this will stick when they are in the throes of making job offer decisions. (Action item) It would be interesting to survey the students the students once they are in their jobs to discover how many offers they had and what was their decision making process to get to the final offer. In other words, did our intellectual conversation about their careers have an immediate impact on their choices a few months from now?
Here are the responses from each of my students:</p>

<ul>
<li>The reading made me think about my short-term and long-term vision of my career. I have not reached an answer, but I definitely have to think about which of the following is most important: a) advancement for position and salary b) enjoying the work and working on what I want and what interests me.</li>
<li>Before reading the Apprenticeship Patterns, I didn&rsquo;t think about actively trying to improve my skills as a software engineer / craftsman. It was all about doing just enough to get the job done!</li>
<li>The reading has made me realize that there is a huge learning curve before I could reach anywhere near to being an expert software developer</li>
<li>Thinking about where I want to be 10+ years down the line is hard; planning so far in advance is a bit undesirable. Staying technical my work like is an interesting idea.</li>
<li>Made me think long term about my career options and whether or not to stay a developer the entire way or to take other options that open up later on</li>
<li>Made me think of where I want to be in 15 years. I don&rsquo;t want to be a programmer for life.</li>
<li>The reading makes me think about whether I want to be a fully technical guy or not. It&rsquo;s hard to coordinate your interests and job requirements</li>
<li>Dream about myself 10,20,30,40 years. What if my manager asked me to fill in a management role? Should I pass for the sake of programming?</li>
<li>I always hear that you can not continue coding for living! even after I reach 40s of age. How I might change my mind about that?</li>
<li>The reading talks about setting long term goals. This led me to reset my current goal (which is short term.)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Readability Process]]></title>
    <link href="http://professor.github.io/journal/2011/03/30/code-readability-process.html"/>
    <updated>2011-03-30T19:36:00-07:00</updated>
    <id>http://professor.github.io/journal/2011/03/30/code-readability-process</id>
    <content type="html"><![CDATA[<h2>Rationale</h2>

<p>As software developers, we want to create clean code, code that is easy for other software developers to read. Ironically, we often don&rsquo;t receive much feedback on our code when we are writing it. Some companies will do code reviews, and the code review feedback may help us write clean code, but we may not understand how other developers are confused. This process allows the programmer to see first hand, what is causing another developer difficulty when they read the code.</p>

<h2>Process</h2>

<p>Preparation) There are two roles, a Programmer (someone who has created code) and a Reader (someone who will review provided code). I am an observer of the process.</p>

<p>The Programmer will select recent production code that they have produced. I do not need to see the code and would prefer not to see it. I&rsquo;d prefer for you to select the most recent code you have created because then you won&rsquo;t be tempted to pick &ldquo;perfect&rdquo; or &ldquo;ideal&rdquo; code. We&rsquo;re just looking for typical code and presumably whatever you wrote recently is typical.</p>

<p>I&rsquo;ll prompt the Reader with some open ended questions. The job of the Programmer is to simply receive the feedback.</p>

<p>Step 1) Programmer, provide some context by explaining the user story (or story card) behind the code. Describe the requirements at a high level in business terms. The Reader should have some notion of the problem the Programmer was trying to solve and the added business value.</p>

<p>Step 2) Reader, read through the code and think out lowd about your initial reaction and your thought process for understanding the code. If things are clear, mention that. If something is confusing, mention the questions that you are thinking. Reason outlowd. There are no wrong answers, this is an opportunity for the Programmer to see how another developer interacts with their code. Provide them with your first impressions.</p>

<p>Do this until you&rsquo;ve walked through the code and think you understand it.</p>

<p>Step 3) Programmer, thank the Reader for their invaluable input. Please just say &ldquo;Thank You&rdquo; &mdash; there is no need to defend your code</p>

<p>Step 4) Reader, do you see ways to refactor the code? Are there opportunities to make it more dry?</p>

<p>Step 5) Reader, if the Programmer left the company and you had to maintain this code, could you do it?</p>

<p>Step 6) Programmer, are there any clarifying questions that you have for the Reader about their comments? (For example, is there something may be very clear to you, but wasn&rsquo;t clear to the Reader. This is your opportunity to better understand how you could make it more clear.)</p>

<p>Step 7) Programmer, reflect on this experience and describe what was the most useful aspect of it?</p>

<p>Step 8) Programmer, was this worth your time?</p>

<p>Step 9) Programmer, please fill in the survey response to this exercise</p>

<h2>History</h2>

<p>While teaching &ldquo;the craft of software development&rdquo; to my masters students, one of my students wanted to write more readable code. I challenged each student to come up with metrics to see if they were improving. The student couldn&rsquo;t think of any. I realized that he would need to show his code to another developer to find out if the code was readable. He could track the feedback as a metric as seen in the comic: <a href="http://www.osnews.com/story/19266/WTFs_m">http://www.osnews.com/story/19266/WTFs_m</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Craftsmanship class 2]]></title>
    <link href="http://professor.github.io/journal/2011/03/16/craftsmanship-class-2.html"/>
    <updated>2011-03-16T20:37:00-07:00</updated>
    <id>http://professor.github.io/journal/2011/03/16/craftsmanship-class-2</id>
    <content type="html"><![CDATA[<p>Question for group: what did you like about the kata?
Random drawing on Kata implementation
Random drawing on maiden speech
Question for the group: how did the reading about estimation of our competence relate to this course?</p>

<p>Responses include</p>

<ul>
<li>The kata was simple enough to let us explore our tools. Never did TDD in C++ before so it gave me time to try that out. I also liked it because it was complex enough to allow us to try complex ideas like recursion.</li>
<li>The Kata had the right level of difficulty. It was a good programming (algorithms) exercise and a good TDD exercise</li>
<li>Helped to start working towards the goal &ldquo;refresh &lsquo;java programming skills&rsquo; &rdquo;</li>
<li>It helped me learn a new testing framework and helped get me back into programming mode after taking a few months break.</li>
<li>Learning TDD in java</li>
<li>Program was simple so I could concentrate on the practice</li>
<li>Got me introduced to the testing framework</li>
<li>Once setup was completed, it showed my that TDD is language/platform agnostic, which should be obvious but was surprising</li>
<li>Learning how to do it in java using eclipse, it was easy</li>
<li>first time doing TDD in Java</li>
<li>learned how to use git with eclipse</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Increasing discussion with a quiet group of students]]></title>
    <link href="http://professor.github.io/journal/2011/03/14/increasing-discussion-with-a-quiet-group-of-students.html"/>
    <updated>2011-03-14T12:38:00-07:00</updated>
    <id>http://professor.github.io/journal/2011/03/14/increasing-discussion-with-a-quiet-group-of-students</id>
    <content type="html"><![CDATA[<p>Every group of students is different and has it&rsquo;s own &ldquo;feel&rdquo; &mdash; sometimes they are connected, energized, quiet, inquisitive. It may not be obvious what it is until the next group of students come and I realize that I like some aspects of the new group and miss some aspects of the older group(s).</p>

<p>I&rsquo;ve been following a particular group of students through a curriculum and I know that they are &ldquo;quieter&rdquo; than previous groups. In the past, my attitude has been, &ldquo;if they don&rsquo;t want to discuss this, that&rsquo;s ok, we&rsquo;ll move on, or we&rsquo;ll end early.&rdquo; However, I&rsquo;m challenging myself to try a different approach with the goal of raising my game and being a better teacher.</p>

<p>Main idea: prose a question to the group and have each person answer it on a sheet of paper. Put all the sheets into a hat. Select one member randomly (I like to use my fire dice) and have them draw the question from the hat. That person then leads a conversation around what was written on the paper. Note: you can have the students write questions on the paper, if this is the case, the person drawing the sheet out of the hat is not responsible for answering the question, they are responsible for getting the group to answer the question.</p>

<h2>Possible Questions</h2>

<p>Here&rsquo;s my initial brainstorm list for possible questions for the group:</p>

<ul>
<li>What are some fears you have about this class?</li>
<li>What is software craftsmanship?</li>
<li>Who is a software role model for you and why?</li>
<li>What are you strong in, how did this happen, and how can you continue to improve?</li>
<li>What is something that you want to work more on? How will you improve, how will you know if you are successful?</li>
<li>What is necessary to become an expert?</li>
</ul>


<h2>The technique in action</h2>

<p>I choose this question for the students.
&ldquo;What are some of your concerns about this course?&rdquo;</p>

<p>Here are their answers.
* regain lost powers in terms of java programming (covered)
* finding a good mentor (covered)
* mentor does not agree to coach
* I fear running out of ideas for learning areas I wish to improve
* getting too caught up in the course
* first time the course is offered, so it might not work out as planned
* how much will it help me in the long run?
* didn&rsquo;t have any real fears up until you mentioned it!
* one fear is not meeting my goals at the end of the semester.
I allowed a student to lead a discussion about the selected slip of paper. The class and I had a great conversation about the student&rsquo;s concern and what were some things to deal with it. I found this approach to be more engaging than going through a syllabus.
After using this technique for a course, I noticed that most of my students didn&rsquo;t meet my expectations for a facilitator. Some would jump into giving their own answer. Others would ask a very good opening question, but then not probe for great details. In these situations when the student stopped leading, I would ask more detailed questions and explore subtle nuances.</p>

<p>All in all, I really enjoyed using this technique.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two more weeks until craftsmanship course starts]]></title>
    <link href="http://professor.github.io/journal/2011/02/28/two-more-weeks-until-craftmanship-course-starts.html"/>
    <updated>2011-02-28T20:24:00-08:00</updated>
    <id>http://professor.github.io/journal/2011/02/28/two-more-weeks-until-craftmanship-course-starts</id>
    <content type="html"><![CDATA[<p>I must be having the butterfly jitters before offering a new course, Special Topics Seminar: Craft of Software Development. I sat down with a google document to review everything that I wanted to do with the course. In a moment of feeling that I must have been missing something, I reviewed my original blog post about the idea. To my surprise, the ideas in my original blog post were consistent with my current ideas and still at the heart of the course design.</p>

<p>I&rsquo;m using Keith Johnstone as an inspiration for this course. While I have some course structure, I want to be flexible with the delivery and reflect after each session on how the course can be better serving this particular group of students. I&rsquo;m also wanting to try some crazy in class exercises. At times, I feel that actors getting on stage is an easier art form to work with than software developers writing code. Perhaps I&rsquo;d feel differently if everyone would be working with the same programming language.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sitemap Powerpoint presentation]]></title>
    <link href="http://professor.github.io/journal/2011/01/13/sitemap-powerpoint-presentation.html"/>
    <updated>2011-01-13T22:54:00-08:00</updated>
    <id>http://professor.github.io/journal/2011/01/13/sitemap-powerpoint-presentation</id>
    <content type="html"><![CDATA[<p><a href="http://professor.github.io/images/TalkAgenda.jpg" border=0><img src="http://professor.github.io/images/TalkAgenda.jpg" width="75%" alt=""/></a></p>

<p>I tried an experimental presentation technique today, which I call &ldquo;Sitemap Presentation.&rdquo;</p>

<p>When I was asked to do the talk &ldquo;Entrepreneurial Opportunities in Silicon Valley&rdquo; for Carnegie Mellon University at the Pittsburgh campus, I drew out on paper my talk outline. My drawing reminded me of Kent Beck&rsquo;s notes when he was presenting at Rails Conf 2008 (?) &mdash; its much like his drawings at the beginning of his book.</p>

<p>When I was creating the slides, I wanted the ability to hop around to different parts of my presentation. Yes, I could do one ordering of the topics, but I wanted to be flexible with my talk and respond to what the audience wanted. So I scanned in my diagram and used the diagram as my agenda slide. I duplicated the diagram throughout the presentation. I found that the drawing was more to my liking. I&rsquo;ve never been fond of doing an agenda slide, they always feel so boring, but this really livened it up and allowed me to see quickly where we were headed.</p>

<p>In my ideal version, each part of the sitemap would be clickable. Thus I&rsquo;d have a title slide followed by an agenda slide. Whenever I clicked anywhere on my diagram, it would go off on that thread and then return to the agenda slide. If I clicked on a different part of the agenda, it would take on a different thread. I&rsquo;ll have to figure out how to do this in powerpoint / keynote.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rethinking regex]]></title>
    <link href="http://professor.github.io/journal/2010/11/18/rethinking-regex.html"/>
    <updated>2010-11-18T12:13:00-08:00</updated>
    <id>http://professor.github.io/journal/2010/11/18/rethinking-regex</id>
    <content type="html"><![CDATA[<p>What if regular expressions were easy to write?</p>

<p>While attending the Golden Gate Ruby Conference 2010, I attended a session about Arel and how Rails was changing their ORM layer to make it easier to incrementally build the query.</p>

<p>Old: Article.find(:all, :order => &ldquo;published_at desc&rdquo;, :limit => 10)</p>

<p>New: Article.order(&ldquo;published_at desc&rdquo;).limit(10)</p>

<p>It occurred to me that this concept of simplifying could be applied to regular expression.</p>

<p>While I have time, I&rsquo;ll continue to build up examples of what the syntax could look like.</p>

<p>Random thoughts:</p>

<p>What: not a number</p>

<ul>
<li>ie a string that can&rsquo;t be convert to a number</li>
<li>A string that contains at least on character</li>
<li>Regex: /^.<em>\D+.</em>$/</li>
<li>Positive examples: 113t23io10908-113</li>
<li>Negative examples: 13431</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transitioning from MySQL to Postgresql]]></title>
    <link href="http://professor.github.io/journal/2010/06/22/transitioning-from-mysql-to-postgresql.html"/>
    <updated>2010-06-22T12:11:00-07:00</updated>
    <id>http://professor.github.io/journal/2010/06/22/transitioning-from-mysql-to-postgresql</id>
    <content type="html"><![CDATA[<p>Postgresql doesn&rsquo;t marshal data types like MySQL does. For many of my tables, I store year as an INTEGER. In one of my tables, when I did the migration, I specified it as a VARCHAR. This generated this error.</p>

<p>PGError: ERROR: operator does not exist: character varying = integer\nLINE 1: &hellip;n_id = u.id)</p>

<p>Solving it was pretty simple. In my development and production databases I did the following commands. Then did a new data push to heroku&rsquo;s postresql database.</p>

<p>1) Create another column using the MySQL Administrator GUI tool. Ie year2 of type INTEGER</p>

<p>2) Run the following command from MySQL Query Browser &ldquo;update courses set year2 = year&rdquo;</p>

<p>3) Drop the column year.</p>

<p>4) Rename column year2 to be year.5) heroku db:push mysql:&hellip;</p>

<p>There are good documents here: <a href="http://docs.heroku.com/database">http://docs.heroku.com/database</a></p>
]]></content>
  </entry>
  
</feed>
